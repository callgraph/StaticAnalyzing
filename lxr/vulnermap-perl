#!/usr/bin/perl 
# $Id: find,v 1.3 1998/04/30 11:58:16 argggh Exp $

# find   --	Find files
#
#	Arne Georg Gleditsch <argggh@ifi.uio.no>
#	Per Kristian Gjermshus <pergj@ifi.uio.no>
#
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

######################################################################

#use lib 'lib/';
#use LXR::Common;
#use LXR::Config;
#use strict;
#use LXR::Common;
#use LXR::Markup;
#use LXR::Template;
#use Local;
#use FileHandle;

#use CGI qw(:all); 
my $path0=$ARGV[3];
my $path1=$ARGV[4];
my $sourceroot=$ARGV[6];
my $sh_ruby_source=$ARGV[7];
my $che1=$ARGV[5];
my $baseurl=$ARGV[8];
my $ddir=$ARGV[9];
my $ver_v=$ARGV[0];
my $ver_a=$ARGV[1];
my $ver_f=$ARGV[2];
my $code_url=$ARGV[10];
my $note_url=$ARGV[11];
my $dbdir;
#print($ARGV[7]."**".$ARGV[1]);
   $dbdir=sprintf($ddir."\/".$ver_v."\/".$ver_a."\/");
#my $c1,$temp_sh,$temp_pic,$temp_zoom,$zoom_module,$graph_moudle;
#my $temp_source01,$temp_source1,$temp_source2;

#my $temp_source1_zoom,$temp_source_1,$temp_source_1_zoom;
#my $watch,$call;
#my $pathv;
#my $file_name;
    if ($che1 ne "t1") {$c1=0;}     else {$c1=1;}

#printf("1111".$sh_ruby_source);


#      $temp_sh=sprintf($Conf->htmlhead);
#      $temp_out=$temp_sh;
#    $cache_filename=$temp_sh;
#      $cache_filename=~s/\/template-head//;
#      $cache_filename=$cache_filename."\/callgraph.appcache";
#      $temp_out=~s/\/http\/template-head//;
#      $temp_sh=~s/template-head/.\/callgraphweb.rb/;
       $temp_sh=sprintf($sh_ruby_source.".\/vulnermap-sql.rb");    
#      $temp_pic=sprintf($Conf->htmlhead);
#      $temp_pic=~s/template-head/.\/pic.rb/;#20130308
       $temp_pic=sprintf($sh_ruby_source.".\/pic.rb");     
#      $temp_zoom=sprintf($Conf->htmlhead);
#      $temp_zoom=~s/template-head/.\/amplify.rb/;
       $temp_zoom=sprintf($sh_ruby_source.".\/amplify.rb");
      $graph_moudle=$ver_f;
      $zoom_module=$c1;
# print("**".$path0."**",$path1."**"); 
 ##20130117 end
    if ($path0 ne "NULL"|| $path1 ne "NULL") {
 #        $temp_source01=sprintf($Conf->sourceroot); 
       $temp_source01=sprintf($sourceroot."\/".$ver_v."\/".$ver_a."\/linux\/");
my $oldtime = time();
#         $temp_source0=$temp_source01;
#         $temp_source0=~s/$temp_out//;
#         $temp_source0=~s/linux\///;
#         $temp_source1=sprintf($Conf->baseurl);
          $temp_source1=$baseurl;
#         $cache_manifest=sprintf("\/lxr".$temp_source0);
#         $wacth=sprintf($temp_source1."watchfuc?v=");#"http://localhost/lxr/http/watchfuc?v="     
          $wacth=sprintf($temp_source1."/watchlist/?");#"http://localhost/lxr/http/watchfuc?v=" 
#         $call=sprintf($temp_source1."callgraph?v=");#"http://localhost/lxr/http/watchfuc?v="     
         $call=sprintf($temp_source1."/vulnermap/?");#"http://localhost/lxr/http/watchfuc?v=" 

#         $temp_source1=~s/\/http\///;
#         $temp_source2=sprintf($temp_source1.$temp_source0);
          $temp_source2=sprintf($temp_source1."\/source1"."\/".$ver_v."\/".$ver_a."\/");
        
  
   #####20121206
  
    $file_name;
    $pathv=0;
     if ($path0 ne "NULL" ||$path1 ne "NULL")
     {
           if ($path0 eq "root"|| $path1 eq "root")
            { 
               $file_name=sprintf("root");
               $pathv=1;
            }
            elsif ($path0 eq "NULL")
            {
              $file_name=$path1;
              $pathv=3;
             }
            elsif ($path1 eq "NULL")
            {
                $file_name=$path0;
                $pathv=2;
             }
             else
             {
               $file_name=sprintf($path0."-".$path1);
               $pathv=4;
             }            
             $file_name=~s/\//_/g;
         
       }
         $temp_source0= sprintf($dbdir.$file_name."_v.graph");
         $temp_source_zoom= sprintf($dbdir."zoom_".$file_name."_v.graph");
 #print("vv".$temp_source0."vv");

    ##20130117
         $temp_source1= sprintf($dbdir.$file_name."_v.svg");
         $temp_source_1= sprintf($dbdir.$file_name."temp_v.svg");#20130308
         $temp_source1_zoom= sprintf($dbdir."zoom_".$file_name."_v.svg");
         $temp_source_1_zoom= sprintf($dbdir."zoom_".$file_name."temp_v.svg");#20130308
 
   #####20121206
	if (-e $temp_source1 || -e $temp_source_1 ||-e $temp_source1_zoom || -e $temp_source_1_zoom ){	#如果存在.svg或temp.svg或zoom_.svg或zoom_temp.svg
		if($zoom_module==0){
			if(-e $temp_source_1 && !-e $temp_source1){ 	#如果存在temp.svg，但不存在.svg，则根据temp.svg画.svg
				system("$temp_pic $temp_source_1 $temp_source1 $code_url $ver_v $note_url");#20130308
			}
			elsif(!-e $temp_source_1 && -e $temp_source0 ){	#如果temp.svg不存在，但.graph文件存在
				system("dot -Tsvg $temp_source0 -o $temp_source_1"); #20120923	#由.graph生成temp.svg
				system("$temp_pic $temp_source_1 $temp_source1 $code_url $ver_v $note_url");#20130308	#由temp.svg生成.svg
			}
			
			#理论上此分支不要也行，留着保证因人为误删也可以正常工作
			elsif(!-e $temp_source_1 && !-e $temp_source0){	#如果画过放大图，但没画过原图 #add from 20140723-修改bug（原来有zoom_.svg，没有.svg，但需要画的是.svg时，无操作），理论上不应该出现，因为zoom_.graph来自于.graph，但怕是后期手动删除了……
				if ($path0 ne "NULL" && $path1 ne "NULL")	#如果path0和path1都存在
				{
					system("$temp_sh -2 $temp_source01 -d $path0 $path1 -o $temp_source0 $wacth $ver_v $ver_a $call $graph_moudle"); #20120923
				}
				else{#如果只有path0存在，或只有path1存在，（或都不存在）
					if($path0 eq "root"||$path1 eq "root")	#如果path0为root根，或path1为root根
					{
						system("$temp_sh -2 $temp_source01 -d -o $temp_source0 $wacth $ver_v $ver_a $call $graph_moudle");
					}
					elsif($path0 ne "NULL"){	#如果只有path0存在
						system("$temp_sh -2 $temp_source01 -d $path0 -o $temp_source0  $wacth $ver_v $ver_a $call $graph_moudle"); #20120923
					}
					elsif($path1 ne "NULL"){	#如果只有path1存在
						system("$temp_sh -2 $temp_source01 -d $path1 -o $temp_source0  $wacth $ver_v $ver_a $call $graph_moudle"); #20120923
					}
				}
				system("dot -Tsvg $temp_source0 -o $temp_source_1"); #20120923
				system("$temp_pic $temp_source_1 $temp_source1 $code_url $ver_v $note_url");#20130308
			}

		}
		else{#如果需要放大功能
			if(-e $temp_source_1_zoom && !-e $temp_source1_zoom){	#如果zoom_temp.svg存在，但zoom_.svg不存在，则根据zoom_temp.svg画zoom_.svg
				system("$temp_pic $temp_source_1_zoom $temp_source1_zoom $code_url $ver_v $note_url");#20130308
			}
			elsif(!-e $temp_source_1_zoom && -e $temp_source0){	#如果zoom_temp.svg不存在，但.graph存在，则根据.graph生成zoom_.graph
				if ($path0 ne "NULL"&& $path1 ne "NULL"){	#如果两个路径都有，则都需要放大
					system("$temp_zoom $temp_source0 $temp_source_zoom $zoom_module $path0 $path1");
				}
				if($path0 ne "NULL" && $path1 eq "NULL" && $path0 ne "root"){	#如果只有path0，且path0不是root根，则只放大path0的部分，生成zoom_.graph
					system("$temp_zoom $temp_source0 $temp_source_zoom $zoom_module $path0 full");
				}
				if($path1 ne "NULL" && $path0 eq "NULL" && $path1 ne "root"){	#如果只有path1，其path1不是root根，则只放大path1的部分，生成zoom_.graph
					system("$temp_zoom $temp_source0 $temp_source_zoom $zoom_module $path1 full");
				}
				system("dot -Tsvg $temp_source_zoom -o $temp_source_1_zoom"); #20120923	生成zoom_.graph后，生成zoom_temp.svg
				system("$temp_pic $temp_source_1_zoom $temp_source1_zoom $code_url $ver_v $note_url");#20130308	#然后根据zoom_temp.svg生成zoom_.svg
			}

			#理论上此分支不要也行，留着保证因人为误删也可以正常工作
			elsif(!-e $temp_source_1_zoom && !-e $temp_source0){	#如果画过原图，但没有放过放大图	#add from 20140723-修改bug（原来有.svg，没有zoom_.svg，但需要画的是zoom_.svg时，无操作），理论上不应该出现，因为zoom_.graph来自于.graph，但怕是后期手动删除了……
				if ($path0 ne "NULL" && $path1 ne "NULL"){	#如果path0和path1都存在
					system("$temp_sh -2 $temp_source01 -d $path0 $path1 -o $temp_source0 $wacth $ver_v $ver_a $call $graph_moudle"); #20120923
				}
				else{#如果只有path0存在，或只有path1存在，（或都不存在）
					if($path0 eq "root"||$path1 eq "root"){	#如果path0为root根，或path1为root根
						system("$temp_sh -2 $temp_source01 -d -o $temp_source0 $wacth $ver_v $ver_a $call $graph_moudle");
					}
					elsif($path0 ne "NULL"){	#如果只有path0存在
						system("$temp_sh -2 $temp_source01 -d $path0 -o $temp_source0  $wacth $ver_v $ver_a $call $graph_moudle"); #20120923
					}
					elsif($path1 ne "NULL"){	#如果只有path1存在
						system("$temp_sh -2 $temp_source01 -d $path1 -o $temp_source0  $wacth $ver_v $ver_a $call $graph_moudle"); #20120923
					}
				}
				if ($pathv!=0 &&$pathv!=1){	#如果不是关于根目录root
					if ($path0 ne "NULL"&& $paht1 ne "NULL"){	#如果path0存在或path1存在
						system("$temp_zoom $temp_source0 $temp_source_zoom $zoom_module $path0 $path1");
					}
					if($path0 ne "NULL" && $path1 eq "NULL" && $path0 ne "root"){	#如果只有path0且是普通目录
						system("$temp_zoom $temp_source0 $temp_source_zoom $zoom_module $path0 full");
					}
					if($path1 ne "NULL" && $path0 eq "NULL" && $path1 ne "root"){	#如果只要path1且是普通目录
						system("$temp_zoom $temp_source0 $temp_source_zoom $zoom_module $path1 full");
					}
					system("dot -Tsvg $temp_source_zoom -o $temp_source_1_zoom"); #20120923
					system("$temp_pic $temp_source_1_zoom $temp_source1_zoom $code_url $ver_v $note_url");#20130308
				}				
			}
		}
	}
	
	else{	#如果不存在temp.svg，且不存在.svg且不存在，且不存在zoom_temp.svg，且不存在zoom_.svg  
		if(!-e $temp_source0){	#如果.graph文件不存在，则生成.graph
			if ($path0 ne "NULL" && $path1 ne "NULL"){	#如果path0和path1都存在
				system("$temp_sh -2 $temp_source01 -d $path0 $path1 -o $temp_source0 $wacth $ver_v $ver_a $call $graph_moudle"); #20120923
			}
			else{#如果只有path0存在，或只有path1存在，（或都不存在）
				if($path0 eq "root"||$path1 eq "root"){	#如果path0为root根，或path1为root根
					system("$temp_sh -2 $temp_source01 -d -o $temp_source0 $wacth $ver_v $ver_a $call $graph_moudle");
				}
				elsif($path0 ne "NULL"){	#如果只有path0存在
					system("$temp_sh -2 $temp_source01 -d $path0 -o $temp_source0  $wacth $ver_v $ver_a $call $graph_moudle"); #20120923
				}
				elsif($path1 ne "NULL"){	#如果只有path1存在
					system("$temp_sh -2 $temp_source01 -d $path1 -o $temp_source0  $wacth $ver_v $ver_a $call $graph_moudle"); #20120923
				}
			}
		}
             
		if($zoom_module!=0){	#如果需要放大功能，则进行放大处理
			if ($pathv!=0 &&$pathv!=1){	#如果不是关于根目录root
				if ($path0 ne "NULL"&& $path1 ne "NULL"){	#如果path0存在或path1存在
					system("$temp_zoom $temp_source0 $temp_source_zoom $zoom_module $path0 $path1");
				}
				if($path0 ne "NULL" && $path1 eq "NULL" && $path0 ne "root"){	#如果只有path0且是普通目录
					system("$temp_zoom $temp_source0 $temp_source_zoom $zoom_module $path0 full");
				}
				if($path1 ne "NULL" && $path0 eq "NULL" && $path1 ne "root"){	#如果只要path1且是普通目录
					system("$temp_zoom $temp_source0 $temp_source_zoom $zoom_module $path1 full");
				}
				system("dot -Tsvg $temp_source_zoom -o $temp_source_1_zoom"); #20120923
				system("$temp_pic $temp_source_1_zoom $temp_source1_zoom $code_url $ver_v $note_url");#20130308
			}
		}
		else{	#若不需要放大功能，则直接根据.graph生成temp.svg和.svg
# print(" ".$temp_source0." ".$temp_source_1." ".$code_url);
			system("dot -Tsvg $temp_source0 -o $temp_source_1"); #20120923
			system("$temp_pic $temp_source_1 $temp_source1 $code_url $ver_v $note_url");#20130308
		}
	}
my $oo=time()-$oldtime;

print "run time is $oo second\n";      
        if ($zoom_module==1 && (($path0 ne "" && $path0 ne "*") ||($path1 ne "" && $path1 ne "*"))){
          print (" <embed src=\"",$temp_source2,"zoom_",$file_name,"_v.svg\"  style=\"margin:0 10px 0 0;\"/>\n ");
        }
        else{
           print (" <embed src=\"",$temp_source2,$file_name,"_v.svg\"  style=\"margin:0 10px 0 0;\"/>\n ");
        }


        print("<hr>\n");
 #	$sourceroot = $Conf->sourceroot;
#	while($file = <FILELLISTING>) {
#	    $file =~ s/^$sourceroot//;
#	    if($file =~ /$path0 $path1/) {
#		print(&fileref("$file", "/$file"),"<br>\n");
#	    }
#	}
#    }
}
