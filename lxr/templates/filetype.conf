# -*- mode: perl -*-
# File/language association configuration file
#
#	$Id: filetype.conf,v 1.6 2013/04/19 12:42:14 ajlittoz Exp $
#

		#######################################
		# File vs. language association rules #
		#######################################

{
		# How to map files to languages
		# Note that the string for the key and the first entry in the
		# array MUST match
	'filetype' =>
			# Format is
			#	LXR_language_name =>
			#		[ ctags_language_name
			#		, filepattern regexp
			#		, module to invoke
			#		, (optional) tabwidth
			#		]
			# Note that to have another language supported by Generic.pm,
			# you must ensure that:
			# a) exuberant ctags supports it
			# b) generic.conf is updated to specify information about the language
			# c) the name of the language given here matches the entry in generic.conf
		# Some languages are commented out until the relevant entries in generic.conf are made
		# The list here is the set supported by ctags 5.8
		{
		  'ant' =>
			[ 'Ant'
			, 'build\.xml$'
			, 'LXR::Lang::Generic'
			, 2
			]
		,
		  'asm' =>
			[ 'Asm'
			, '\.((?i)asm|s|A51|29[kK]|[68][68][kKsSxX]|x[68][68])$'
			, 'LXR::Lang::C'
			, 4
			]
# 		,
# 		  'asp'
#			[ 'Asp'
#			, '\.as[ap]$'
#			,
#			]
		,
		  'awk' =>
			[ 'Awk'
			, '\.[gm]?awk$'
			, 'LXR::Lang::Generic'
			, 2
			]
# 		,
# 		  'basic'
#			[ 'Basic'
#			, '\.(bas|b[bi]|pb)$'
#			,
#			]
# 		,
#		  'beta'  => [ 'Beta', '(?i)\.bet$', 'LXR::Lang::Generic' ]
		,
		  'C' =>
			[ 'C'
			, '\.c$|\.pc$'
			, 'LXR::Lang::C'
			, 4
			]
		, 
		  'C++' =>
			[ 'C++'
			, '\.C$|((?i)\.c\+\+$|\.cc$|\.cpp$|\.cxx$|\.h$|\.hh$|\.hpp?$|\.hxx$|\.h\+\+$)'    #'
			, 'LXR::Lang::C'
			, 4
			]
		,
#		  'C#'
#			[ 'C#'
#			, '\.cs$'
#			,
#			]
#		,
		  'Cobol' => [ 'Cobol',  '(?i)\.c(ob|bl)$', 'LXR::Lang::Cobol' ]
		,
# CAVEAT - CAVEAT - CAVEAT - 2012-08-19 (ajl)
# Do not enable CSS: causes segmentation fault with ctags 5.8-7
# Parsing still problematic with ctags 5.8-9
# 		  'css'  =>
# 			[ 'CSS'
# 			, '(?i)\.css$'
# 			, 'LXR::Lang::Generic'
# 			, 4
# 			]
# 		,
#		  'dos' =>
#			[ 'DosBatch'
#			, '\.(bat|cmd)$'
#		# Attention! extension .cmd conflicts with REXX
#			,
#			]
#		,
#		  'eiffel'  => [ 'Eiffel', '(?i)\.e$', 'LXR::Lang::Generic' ]
#		,
#		  'erlang' =>
#			[ 'Erlang'
#			, '\.[eh]rl$'
#			,
#			]
#		,
#		  'flex' =>
#			[ 'Flex'
#			, '\.(as|mxml)$'
#			,
#			]
		,
		  'fortran' =>
			[ 'Fortran'
			, '(?i)\.f$|\.for$|\.ftn$|\.f77$$'
			, 'LXR::Lang::Generic'
			]
# 		,
# 		  'fortran9x' => # Must define a specific parser for new F9x syntax
# 			[ 'Fortran'
# 			, '(?i)\.f90$|\.f95$'
# 			, 'LXR::Lang::Generic'
# 			]
		,
		  'html' =>
			[ 'HTML'
			, '\.s?html?$'
			, 'LXR::Lang::HTML'
			, 4
			]
		,
		  'Java' =>
			[ 'Java'
			, '(?i)\.java$'
			, 'LXR::Lang::Java'
			, 4
			]
		,
		  'JavaScript' =>
			[ 'JavaScript',
			'(?i)\.js$'
			, 'LXR::Lang::Generic'
			]
		,
#		  'Lisp' =>
#			[ 'Lisp'
#			, '(?i)\.cl$|\.clisp$|\.el$|\.l$|\.lisp$|\.lsp$|\.ml$'
#			, 'LXR::Lang::Generic'
#			]
#		,
#		  'lua' =>
#			[ 'Lua'
#			, '\.lua$'
#			,
#			]
#		,
			# No tabwidth specified here as an example
		  'Make' =>
			[ 'Make'
			, '(?i)\.mak$|(?i)\.mk$|[Mm]akefile*'
			, 'LXR::Lang::Make'
			]
		,
#		  'matLab' =>
#			[ 'Matlab'
#			, '\.m$'
#			,
#			]
#		,
#		  'ocaml' =>
#			[ 'Ocaml'
#			, '\.mli?$'
#			,
#			]
#		,
		  'Pascal' =>
			[ 'Pascal'
			, '(?i)\.p$|\.pas$'
			, 'LXR::Lang::Pascal'
			, 4
			]
		,
		  'Perl' =>
			[ 'Perl'
			, '(?i)\.plx?$|\.pm$|\.perl$'
			, 'LXR::Lang::Perl'
			, 4
			]
		,
		  'php' =>
			[ 'PHP'
			, '(?i)\.php$|\.php3$|\.phtml$'
			, 'LXR::Lang::Generic'
			, 2
			]
		,
		  'Python' =>
			[ 'Python'
			, '(?i)\.pyx?$|\.python$|\.px[di]$|\.scons$'
			, 'LXR::Lang::Python'
			, 4
			]
		,
#		  'rexx'   =>
#			[ 'REXX'
#			, '(?i)\.cmd$|\.rexx$|\.rx$'
#		# Attention! extension .cmd conflicts with DOS batch
#			, 'LXR::Lang::Generic'
#			]
#		,
		  'ruby' =>
			[ 'Ruby'
			, '(?i)\.rb$|\.ruby$'
			, 'LXR::Lang::Ruby'
			]
		,
#		  'scheme' => [ 'Scheme', '(?i)\.sch$|\.scheme$|\.scm$|\.sm$', 'LXR::Lang::Generic' ]
#		,
		  'shell' =>
			[ 'shell'
			, '(?i)\.sh$|\.bsh$|\.bash$|\.ksh$|\.zsh$|\.m4$'
				# .m4 added above though it is not properly a shell
			, 'LXR::Lang::Generic'
			]
		,
#		  's-Lang' => [ 'Slang', '(?i)\.sl$', 'LXR::Lang::Generic' ]
#		,
#		  'sml' =>
#			[ 'SML'
#			, '\.sml$|\.sig$'
#			,
#			]
#		,
		  'SQL' =>
			[ 'SQL'
			, '(?i)\.sql$|\.pks$|\.pkb$'
			, 'LXR::Lang::Generic'
			]
		,
#		  'tcl' => [ 'Tcl', '(?i)\.tcl$|\.tk$|\.wish$|\.itcl$',                     'LXR::Lang::Generic' ]
#		,
#		  'tex' =>
#			[ 'Tex'
#			, '\.tex$'
#			,
#			]
#		,
		  'VB' =>
			[ 'VB'
			, '(?i)\.bas$|\.cls$|\.ctl$|\.frm$|\.vbs$'
			, 'LXR::Lang::Generic'
			]
#		,
#		  'vera' =>
#			[ 'Vera'
#			, '\.vr[hi]?$'
#			,
#			]
#		,
#		  'verilog' =>
#			[ 'Verilog'
#			, '\.v$'
#			,
#			]
#		,
#		  'vhdl' =>
#			[ 'VHDL'
#			, '\.vhdl?$'
#			,
#			]
#		,
#		  'vim' =>
#			[ 'Vim'
#			, '\.vim$'
#			,
#			]
#		,
#		  'yacc' =>
#			[ 'YACC'
#			, '\.y$'
#			,
#			]
		}

		# Maps interpreter names to languages.  The format is:
		#  regexp => langname
		#   - regexp is matched against the tail part after #!
		#       on the first line of a file
		#       ($ is automatically added at the end of regexp
		#        to match only at the end of the interpreter
		#        name command)
		#   - langname must match one of the keys in filetype above.
		#
		# This mapping is only used if the filename doesn't match a pattern above, so
		# a shell script called shell.c will be recognised as a C file, not a shell file.

,	'interpreters' =>
		{ 'perl'	=> 'Perl'
		, 'bash'	=> 'shell'
		, 'csh'		=> 'shell'
		, 'python'	=> 'Python'
		, 'ksh'		=> 'shell'
		, 'zsh'		=> 'shell'
		, 'sh'		=> 'shell'
		, 'ksh'		=> 'shell'
		}
}
