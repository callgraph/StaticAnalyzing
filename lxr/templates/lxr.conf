# -*- mode: perl -*-
# LXR master configuration file
#
#-	$Id: lxr.conf,v 1.57 2013/01/21 10:49:36 ajlittoz Exp $
#-
#-
#-	This configuration file is fully configured by script
#-	configure-lxr.pl (along with all other files).
#-
#-	Though it remains somehow compatible with prior versions
#-	multi-step installation method (preconfiguration by script
#-	initial-config.sh followed by manual editing),
#-	the interactive "macro" directives interspersed through
#-	the text nearly prohibit easy editing of this file:
#-	this needs a full understanding of the directives to be
#-	able to get rid of them.
#-
#-	updated for automatic configuration	-- ajl 2012/05/05
#-	updated to use LCL statements		-- ajl 2012/11/30
#-	updated for web server config.		-- ajl 2013/01/20

(
		################################
		# Global configuration section #
		################################

#@ADD	%LXRtmpldir%/global.conf.part

# ------------------------------------------------------------------------

		###############################
		# Tree configuration sections #
		###############################

#@LOG Marking tree section
#@PASS2 here_tree
# ------------------------------------------------------------------------
,	{

		# Server configuration subsection #
		#=================================#
#@LOG Configuring LXR server parameters
		#-
		#- NOTE --------------------------------------------------- #
		#- ---- 'baseurl' and 'baseurl_aliases' are deprecated ---- #
		#- ---- in favor of 'host_names'.                      ---- #
		#- ---- See "Global configuration section"             ---- #
		#- ----                                                ---- #
		#- ---- 'host_names' takes precedence if 'baseurl' is  ---- #
		#- ---- also defined.                                  ---- #
		#- ----                                                ---- #
		#- ---- Support for 'baseurl' is maintained for        ---- #
		#- ---- compatibility with existing LXRs.              ---- #
		#- ----                                                ---- #
		#- Configuration for http://192.168.1.1/lxr.
		#- baseurl is used to select configuration block.
#- 	  'baseurl' => 'http://192.168.1.1/lxr'    # Put your URL here
#- 		     # baseurl_aliases allows other URLs to be used to reach the site
#- 		     # comment this out if you do not want any aliases
#- 	, 'baseurl_aliases' =>
#- 			[ 'http://localhost/lxr'
#- 			, 'http://mydomain/lxr'
#- 			]
		#- ----                                                ---- #
		#- ----        End of deprecated parameters            ---- #
		#- ---- If you use them, uncomment the comma below     ---- #
		#- -------------------------------------------------------- #
#-	,

#@MSG The virtual root is the fixed URL part after the hostname.
#- - Virtual root is slightly different depending on context - -
#- - because we want to handle everything with a single LXR instance - -
#@IF	%_singlecontext%
#- - Single tree context - -
#-@	ASK --- Virtual root? (i.e. URL part after host); -1; ; /lxr
#@	DEFINE virtroot="%virtrootbase%"
#@	MSG You previously defined the virtual root as %virtroot%
#@ELSE
#- - Multiple trees context - -
#@	IF	'b' eq "%_virtrootpolicy%"
#@		MSG The tree needs to be uniquely identified as e.g. %virtrootbase%/the_tree
#@		ASK --- Tree designation for URL? (e.g. the_tree); -2
#@		DEFINE virtroot="%virtrootbase%/%A%"
#@	ELSEIF	'c' eq "%_virtrootpolicy%"
#@		REMIND The custom multiple trees management method must contain
#@		MSG at least the server section name %virtrootbase% and a unique
#@		MSG tree designation (in an order compatible with the URL magic
#@		MSG in the server configuration files). 
#@		ASK --- Full virtual root? (e.g. %virtrootbase%/something); -2
#@		DEFINE virtroot="%A%"
#@	ELSE
#@		ERROR Unknown multiple trees management choice!
#@		ERROR If you did not tamper with context file,
#@		ERROR report this as a bug.
#@		DEFINE virtroot='*** ERROR ***'
#@	ENDIF	%_virtrootpolicy%
#@ENDIF	%_singlecontext%
#- - End of virtroot differences - -
#-
	  'virtroot'    => '%virtroot%'
#- The following @DEFINE allows automatic transfer of correct 'virtroot'
#- into lighttpd-lxrserver.conf.
#@IF	'' eq "%virtroot%"
#@	DEFINE	virtroot='/'
#@ENDIF

		#- Title for this tree to display in page header area
		#- if you aren't satisfied with the default
#@ASK --- Caption in page header? (e.g. Project XYZZY displayed by LXR); -2
	, 'caption' => '%A%'
#-
#- - In single tree context, just output a reminder in case of change;
#- - for multiple trees, generate the speed switch buttons
#@IF	%_singlecontext%
		# Button title to switch to this tree when multiple
		# trees are managed by LXR
#	, 'shortcaption' => 'Tree'
#@ELSE
#@	ASK Do you want a speed switch button for this tree ?; 1; yes, no; Y, N
#@	IF	"%A%" eq 'Y'
#@		ASK --- Short title for button? (e.g. XYZZY); -2
	, 'shortcaption' => '%A%'
#@	ENDIF
#@ENDIF	%_singlecontext%
#-
#@ASK Do you need a specific encoding for this tree ?; 2; yes, no; Y, N
#@IF	"%A%" eq 'Y'

#@	ASK --- Encoding name? (e.g. iso-8859-1); -2
		# Character encoding (overrides default)
	, 'encoding'	=> '%A%'
#@ENDIF

		# a link of the form (prefix)($filepath)(postfix) is generated when viewing a file
		#   example for cvsweb:
#	, 'cvswebprefix' => 'http://cvs.myhost.com/cgi-bin/cvsweb.cgi'
#	, 'cvswebpostfix' => '?cvsroot=rootname'
		#   example for viewcvs:
#	, 'cvswebprefix' => 'http://cvs.myhost.com/cgi-bin/viewcvs.cgi/myroot'
#	, 'cvswebpostfix' => ''

		# Tree location subsection #
		#==========================#
#@LOG Describing tree location

		# sourceroot - where to get the source files from

#- - Handle the supported variants of tree storage - - 
#- -
#@ASK,C How is your tree stored?; 1; files, cvs, git, svn, hg, bk; F,C,G,S,H,B
#@CASE	%C%
#- - Case No. 1: plain files and directories
#@F:
		#- For ordinary directories, this specifies a directory which has each version as a
		#- subdirectory e.g.
		#-  project-tree/version1/...
		#-  project-tree/version2/...
		#- The names of the version directories must match the values for the Version
		#- variable (see the version selection subsection).
#@	MSG A source directory contains one sub-directory for every version.
#@	ASK --- Source directory? (e.g. /home/myself/project-tree); -2
	, 'sourceroot' => '%A%'
#-
#- - Case No. 2: CVS repository
#@C:
		#- This specifies a CVS repository by setting the value to "cvs:"
		#- followed by the path to the repository.  Note this must be file accessible - remote
		#- server access does NOT work.
#@	MSG A CVS repository is a directory containing ,v files
#@	ASK --- CVS repository? (e.g. /home/myself/project-CVS); -2
	, 'sourceroot' => 'cvs:%A%'
#-
#- - Case No. 3: GIT repository
#@G:
		#- For a GIT repository, the 'sourceroot' config variable points to the directory
		#- in which you find the `objects', `refs', `index' etc.
		#- directories.
#@	MSG A Git repository is a directory containing objects, refs, index, ... subdirectories.
#@	MSG It is usually named .git in some user directory and is thus not visible.
#@	ASK --- Git repository? (e.g. /home/myself/project-git/.git); -2
#@	DEFINE GITrepo="%A%"
	, 'sourceroot' => 'git:%A%'
		#-
		#- Any parameters to the source access method should be specified below.
		#-
		#- GIT:	if 'git_annotations' is non-zero, the file revision that
		#-		introduced each line is displayed.
		#-		'git_blame' will add the author of each line to the
		#-		output. Keep in mind that the core LXR code
		#-		will only request author information if
		#-		annotations are switched on, too!
	, 'sourceparams' =>
#@	ASK --- display revision-ids?; 1; yes,no; 1,0
		{ 'git_annotations'	=> %A%
#@	ASK --- display revision author name?; 1; yes,no; 1,0
		, 'git_blame'		=> %A%
		}
#-
#- - Case No. 4: Subversion repository
#@S:
		#- For a Subversion repository, specify svn: followed by the path to the
		#- repository.  Presently, the implementation is limited to
		#- local (file-accessible) repositories.
#@	MSG A Subversion repository is a directory containing a database for
#@	MSG the source-tree. The present backend implementation in LXR limits
#@	MSG access to local repositories.
#@	ASK --- Subversion repository? (e.g. /home/myself/project-svn); -2
	, 'sourceroot' => 'svn:%A%'
		#-
		#- Any parameters to the source access method should be specified below.
		#-
		#- svn:	if 'svn_annotations' is non-zero, the file revision that
		#-		introduced each line is displayed.
		#-		'svn_blame' will add the author of each line to the
		#-		output. Keep in mind that the core LXR code
		#-		will only request author information if
		#-		annotations are switched on, too!
	, 'sourceparams' =>
#@	ASK --- display revision-ids?; 1; yes,no; 1,0
		{ 'svn_annotations'	=> %A%
#@	ASK --- display revision author name?; 1; yes,no; 1,0
		, 'svn_blame'		=> %A%
		}
#-
#- - Case No. 5: Mercurial repository
#@H:
		#- For a Mercurial repository, specify hg: followed by the path to the
		#- repository directory.  Presently, the implementation is limited to
		#- local (file-accessible) repositories.
#@	MSG A Mercurial repository is a directory containing a database for
#@	MSG the source-tree. The present backend implementation in LXR limits
#@	MSG access to local repositories.
#@	ASK --- Mercurial repository? (e.g. /home/myself/project-hg); -2
	, 'sourceroot' => 'hg:%A%'
		#-
		#- Any parameters to the source access method should be specified below.
		#-
		#- hg:	if 'hg_annotations' is non-zero, the changeset that
		#-		introduced each line is displayed.
		#-		'hg_blame' will add the author of each line to the
		#-		output. Keep in mind that the core LXR code
		#-		will only request author information if
		#-		annotations are switched on, too!
	, 'sourceparams' =>
#@	ASK --- display changeset-ids?; 1; yes,no; 1,0
		{ 'hg_annotations'	=> %A%
#@	ASK --- display changeset author name?; 1; yes,no; 1,0
		, 'hg_blame'		=> %A%
		}
#-
#- - Case No. 6: BitKeeper repository (kept only for historical reason)
#@B:
		#- For a BitKeeper repository, specify bk: followed by the path to the
		#- repository.  For BK it is also necessary to specify a 'cachepath' parameter in
		#- the 'sourceparams' value below.  This should point to a directory where the
		#- code can write and read files.
#@	MSG BitKeeper is proprietary software. The BK management routines are more or less
#@	MSG in their 2005 state. This interface has not been tested for many years.
#@	MSG There is absolutely no guarantee on BK operation.
#@	ASK --- BK repository? (e.g. /home/myself/project-BK); -2
	, 'sourceroot' => 'bk:%A%'
		#-
		#- Any parameters to the source access method should be specified below.
		#-
	, 'sourceparams' =>
#@	MSG BK needs a read/write temporary directory.
#@	ASK --- BK temporary directory? (e.g. /home/myself/BKtemp); -2
		{ 'cachepath'	=> '%A%' }
#@ENDC
#- - End of tree storage - -

#		# The string to display as the base part of every path in the tree
#-	, 'sourcerootname' => 'Example'
#-		# Or if you want automatic version insertion
#-	, 'sourcerootname' => '$v'
#@ASK Name to display for the path root? (e.g. Project or $v for version); -1; ; $v
	, 'sourcerootname' => '%A%'

		# Version selection subsection #
		#==============================#
#@LOG Enumerating versions

	, 'variables' =>

			# Define typed variable "v".
		{ 'v' =>
#@ASK Label for version selection menu? ; -1; ; Version
			{ 'name' => '%A%'
				# This is the list of versions to index.
#-
#- - Manage the different version enumeration methods - -
#@MSG Versions can be explicitly enumerated, be read from a file or computed
#@MSG by a function. The latter case is recommended for VCS-stored trees.
#@ASK,V Version enumeration method?; 1; list, file, function; L,R,F
				#- This can come from a file, a function or be explicitly
				#- ennumerated.
#@CASE	%V%
#-
#- - Case No. 1: versions stored in a file
#@R:
#@	ASK --- Version file? (absolute path or relative to LXR root dir.); -2
			, 'range' => [ readfile('%A%') ]
#-
#- - Case No. 2: versions given explicitly in a list
#@L:
			, 'range' => [qw(
#@	KEEPON --- Version name? (hit return to stop); -2
					%A%
#@	ENDK
						)]
#-
#- - Case No. 3: versions dynamically computed by a function applied to each file
#@F:
				#- If files within a tree can have different versions,
				#- e.g in a CVS tree, 'range' can be specified as a
				#- function to call for each file:
#@	MSG This template contains generic nearly-all-purpose functions.
#@	MSG Since designing such a function is not a trivial exercise,
#@	MSG you'd better choose an available one. You can later refine it
#@	MSG to fit your needs.
#@	ASK,F --- Generic or custom function?; 0; files, CVS, Git, svn, hg, custom; F,C,G,S,H,U
#@	CASE	%F%
#-
#- - Case No. 3a: function suited to plain files tree
#@F:
				#- Automatically collects the version names
				#- in 'sourceroot' directory which are sorted in
				#- lexicographic order (this may not meet the
				#- usual "semantic" order if version name is
				#- made of numbers).
				#-
			, 'range' => sub
				{	opendir (my $dh, $LXR::Common::config->{'sourceroot'})
					|| die "can't open source root directory: $!";
					my @dirs = grep
								{  m/^[^.]/		# Discard invisible items
								&& -d "$LXR::Common::config->{'sourceroot'}/$_"
								}
								readdir($dh);
					closedir($dh);
					return(sort @dirs);
				}
#-
#- - Case No. 3b: function suited to CVS tree
#@C:
				#- Get the releases and revisions from CVS control data.
				#- Revisions may not be meaningful since their numbers
				#- are not synchronised between files.
				#- If they give too much semantic "noise", comment out
				#- the line requesting them.
				#-
			, 'range' => sub
				{
		##### The following #U lines may be uncommented if you prefer
		##### the static list gathered by ./genxref --allversions
		#U			my $vfn = $LXR::Common::config->{'virtroot'};
		#U			$vfn =~ s|([^-a-zA-Z0-9.\@_])|sprintf("%%%02X", ord($1))|ge;
		#U			$vfn = 'custom.d/CVS' . $vfn;
		#U			if (-f $vfn) {
		#U				return readfile($vfn);
		#U			} else {
						return	# grep {/(release|head)/}
						( $files->allreleases($LXR::Common::pathname)
						, $files->allrevisions($LXR::Common::pathname)
						)
		#U			}
				}
#-
#- - Case No. 3c: function suited to GIT tree
#@G:
				#- When using a GIT repo, you can use its tags
				#- to create a list of versions. As an extra
				#- bonus, with the Linux::KernelSort Perl module,
				#- you can properly sort kernel versions. Just
				#- leave it off for generic projects.
				#-
			, 'range' => sub
				{ my $some_dir;
		##### You can comment out one of the following blocks
		##### if you want to limit the set of versions
				  $some_dir = "%GITrepo%/refs/tags";
				  opendir (DIR, $some_dir) || die "cannot opendir $some_dir: $!";
				  my @files = grep { -f "$some_dir/$_" } readdir (DIR);
				  closedir DIR;
		##### Add more
				  $some_dir = "%GITrepo%/refs/heads";
				  opendir (DIR, $some_dir) || die "cannot opendir $some_dir: $!";
				  my @files = grep { -f "$some_dir/$_" } readdir (DIR);
				  closedir DIR;
		##### End of enumeration
				  unshift (@files, "HEAD");
				  return sort @files;
				}
				#
				#	Advanced example for Linus's upstream
				#	linux-2.6 kernel repository:
				#	'range' => sub
				#		{
				#			use Linux::KernelSort;
				#			my $kernel = new Linux::KernelSort;
				#
				#			my $some_dir = "/path/to/linux-2.6/.git/refs/tags";
				#			opendir (DIR, $some_dir) || die "cannot opendir $some_dir: $!";
				#			my @files = grep { -f "$some_dir/$_" } readdir (DIR);
				#			closedir DIR;
				#		# Linus's tags all have a leading "v"
				#		# which we must cut off for sorting
				#		# add again afterwards.
				#			for (my $i = 0; $i < scalar (@files); $i++)
				#			{
				#				$files[$i] =~ s/^v//;
				#			}
				#			@files = $kernel->sort (@files);
				#			for (my $i = 0; $i < scalar (@files); $i++)
				#			{
				#				$files[$i] =~ s/^/v/;
				#			}
				#
				#			return @files;
				#		}
#-
#- - Case No. 3d: function suited to Subversion tree
#@S:
				#- Get the revisions from Subversion control data.
				#- Changeset ids may not be meaningful since their numbers
				#- are not ordered chronologically.
				#- Tags and branches are more related to milestones
				#- for the project.
				#-
			, 'range' => sub
				{
						return	grep {defined}
		##### You may comment some of the following lines to limit the
		##### number of displayed revisions, provided at least one is
		##### left active.
						( $files->allreleases($LXR::Common::pathname)
						, $files->allbranches($LXR::Common::pathname)
						, $files->alltags    ($LXR::Common::pathname)
						)
				}
#-
#- - Case No. 3e: function suited to Mercurial tree
#@H:
				#- Get the revisions from Mercurial control data.
				#- Revisions may not be meaningful since their numbers
				#- increment sequentially on every commit.
				#- Latest revision on branches and tags may be more
				#- meaningful.
				#-
			, 'range' => sub
				{
						return	grep {defined}
		##### You may comment some of the following lines to limit the
		##### number of displayed revisions, provided at least one is
		##### left active. If you keep only allbranches, uncomment the
		##### 'tip' line to guarantee at least one revision is
		##### reachable.
						( $files->allbranches()
						, $files->alltags    ()
					#	, 'tip'
						)
				}
#-
#- - Case No. 3f: reminder for your own function
#@U:
#@	REMIND Remember to write your 'range' function.
				# CAUTION - CAUTION - CAUTION - CAUTION
				#    This is NOT a real function!
				# You MUST write one, otherwise nothing can be displayed.
				# This stubborn stub function drops anything!
				# CAUTION - CAUTION - CAUTION - CAUTION
			, 'range' => sub					# CAUTION
				{ # design your own function	# CAUTION
					return ()					# CAUTION
				}								# CAUTION
				# CAUTION - CAUTION - CAUTION - CAUTION
#@	ENDC
#@ENDC
#- - Default initial version to display (depends on enumeration method)
#- - Version list not provided by a function (file or explicit list)
#@IF	"%V%" ne 'F'
#@MSG By default, first version in list is displayed. You may also indicate
#@MSG a prefered version.
#@	ASK	--- Default displayed version is first in 'range'?; 1; yes,no; Y,N
#@	IF	"%A%" eq 'N'
#@		ASK,N --- Default version name?; -2
			, 'default' => '%N%'
#@	ELSE
				# The default version to display
				# If not specified, first in 'range' used
#			, 'default' => 'v3.1'
#@	ENDIF
#@ELSE
#- - Version list provided by a function
#@	MSG With a function, you MUST indicate a default version.
#@	CASE	%F%
#@F:
#@		ASK,N --- Default version name?; -2
#@C:S:
#@		ASK,N --- Default version name?; -1; ; head
#@G:
#@		ASK,N --- Default version name?; -1; ; HEAD
#@H:
#@		ASK,N --- Default version name?; -1; ; tip
#@U:
#@		DEFINE N='??to be provided by user??'
#@	ENDC
			, 'default' => '%N%'
#@ENDIF
#- - End of version enumeration methods - -
#-
			}

			# Other variables may be defined for use by rewrite rules
			# in the subdirectory section.
			# These variable definitions are needed for Linux kernel
			# browsing. Read carefully the User's Manual.
			# Alternately, use template lxrkernel.conf dedicated to kernel
			# configuration.
		}

		# Subdirectory subsection #
		#=========================#
#@LOG Setting directory lists

		# Tree-specific files to ignore (in every directory of the tree)
		# Extend and uncomment the following copy of the global
		# parameter to override:
#	, 'ignorefiles' =>
#		'^\\.|~$|\\.(o|a|orig)$|^CVS$|^core$'

		# Directories to always ignore. These usually are the SCM's
		# private directories which possibly may contain non-public
		# project history. Note that .xxx directories are hidden
		# by an internal hard-coded rule. Redundant example:
#	, 'ignoredirs' => ['CVSROOT', 'CVS', '.git']
#@MSG Some directories may contain non-public project data (binaries,
#@MSG compilers caches, SCM control data, ...). They can be hidden from LXR.
#@KEEPON --- Directory to ignore, e.g. CVSROOT or CVS? (hit return to stop)
#@	ON	first
	, 'ignoredirs' =>	[qw(
#@	ENDON
					%A%
#@	ON	last
						)]
#@	ENDON
#@ENDK

		# Where to look for include files inside the sourcetree.
		# This is used to hyperlink to included files. Example:
#@MSG If your source code uses "include" statements (#include, require, ...)
#@MSG LXR needs hints to resolve the destination file.
#@KEEPON --- Include directory, e.g. /include? (hit return to stop)
#@	ON	first
	, 'incprefix' =>	[qw(
#@	ENDON
					%A%
#@	ON	last
						)]
#@	ENDON
#@	ON	none
#	, 'incprefix' => [ '/include', '/include/linux' ]
#@	ENDON
#@ENDK

		# These do funky things to paths in the system - you probably don't need them.
		# They are used to simulate compiler behaviour to various options
		# to rewrite short paths from (#)include statement and get the
		# real "physical" path to the file.
# 	, 'maps' =>		# $a means substitute with current value of variable 'a'
# 			[ '/include/asm[^\/]*/' => '/include/asm-$a/'
# 			, '/arch/[^\/]+/'       => '/arch/$a/'
# 			],

		# Having a fully functional set of 'incprefix'/'maps' directives
		# for the kernel is not a trivial task. It requires defining many
		# auxiliary variables which are dependent on the current development
		# state of the kernel.
		# Use template lxrkernel.conf.

		# Data storage subsection #
		#=========================#
#-
#@ADD	%LXRtmpldir%/datastorage.conf.part
#-
	}

#@ENDP2
)
