# -*- mode: perl; tab-width: 4 -*-
# Configure options for the generic language support
#
#	$Id: generic.conf,v 1.39 2013/04/19 12:42:14 ajlittoz Exp $
#

{

	# Options to always feed to ectags
	'ectagsopts' =>
		[ "--options=" . $config->ectagsconf
		, "--c-types=+plx"
		, "--eiffel-types=+l"
		, "--fortran-types=+L",
		]

	# How to map a language name to the ectags language-force name
	# if there is no mapping, then the language name is used
,	'eclangnamemapping' =>
		{ 'C'      => 'c'		# not necessary as ctags
		, 'C++'    => 'c++'		# seems to take language
		, 'Python' => 'python'	# names case-insensitive
		, 'SQL'    => 'SQL2'	# -- ctags processing replaced by regexp
								#    (see ectags.conf)
			# NOTE: language description is not case-insensitive and
			#		makes assumptions about layout of declarations.
			#		Likely to give nothing.
		, 'shell'  => 'sh'
		}

	# lang map specifies info for each language
	# what the reserved words & comment chars are
,	'langmap' =>
	{
		'Ant' =>
			# Basically, Ant is an XML application.
			# What follows is very experimental!
		{ 'identdef' => '[\w-]+'
			# List collected from pages at http://ant.apache.org/manual/index.html
		, 'reserved' => [ qw(
			project     name default basedir id
			description
			property    location
			target      depends if unless extensionOf onMissingExtensionPoint
			extension-point
			tstamp
			condition   property
			classpath
			pathelement path
			fileset     dir
			filelist    refid
			dirset
			include exclude
						) ]
		, 'spec' =>
			[ { 'comment'	=> [ '<!--', '-->'] }
			, { 'string' 	=> [ '"',    '"' ] }
			, { 'string' 	=> [ "'",    "'" ] }
			]
		, 'typemap' =>
			{ 'p' => 'project'
			, 't' => 'target'
			}
		, 'langid' => 1
		}
	,
		'Asm' =>
		{ 'identdef' => '[_a-zA-Z.$][\w.$]*'
			# List collected from
			# http://sourceware.org/binutils/docs-2.23.1/as/Pseudo-Ops.html
		, 'reserved' => [ qw(
			.abort   .align  .altmacro .ascii .asciz
			.balign  .bundle_align_mode .bundle_lock .bundle_unlock .byte
			.cfi_sections .cfi_startproc .cfi_endproc          .cfi_personality
			.cfi_ldsa     .cfi_def_cfa   .cfi_def_cfa_register .cfi_def_cfa_offset
			.cfi_adjust_cfa_offset       .cfi_offset           .cfi_rel_offset
			.cfi_register .cfi_restore   .cfi_undefined        .cfi_same_value
			.cfi_remember_state          .cfi_return_column    .cfi_signal_frame
			.cfi_window_save             .cfi_escape           .cfi_val_encoded_addr
			.comm
			.data    .def    .desc     .dim   .double
			.eject   .else   .elseif   .end   .endef
			.endfunc .endif  .equ      .equiv .eqv
			.err     .error  .exitm    .extern
			.fail    .file   .fill     .float .func
			.global  .globl  .gnu_attribute
			.hidden  .hword
			.ident   .if     .incbin   .include .int
			.internal .irp   .irpc
			.lcomm   .lflags .line     .linkonce .list
			.ln      .loc    .loc_mark_labels .local .long
			.macro   .mri
			.noaltmacro .nolist
			.octa    .offset .org
			.p2align .popsection .previous .print .protected
			.psize   .purgem .pushsection
			.quad
			.reloc   .rept   .rodata
			.sbttl   .scl    .section  .set   .short
			.single  .size   .skip     .sleb128 .space
			.stabd   .stabn  .stabs    .string .string8
			.string16 .string32 .string64 .struct
			.subsection .symver
			.tag     .text   .title    .type
			.uleb128
			.val    .version .vtable   .vtable_inherit
			.warning .weak   .weakref  .word
						) ]
		, 'spec' =>
			[ { 'comment'	=> [ '/\*',         '\*/'] }
			# Does not address "line comment" since syntax is target-specific
			, { 'string'	=> [ '"',           '"',   '\\\\.' ] }
			, { 'string'	=> [ "'\\\\?." ] }
			, { 'include'	=> [ '#\s*include', "\$" ] }
			]
		, 'typemap' =>
			{ 'd' => 'define'
			, 'l' => 'label'
			, 'm' => 'macro'
			, 't' => 'struct or record'
			}
		, 'langid' => 2
		}
# 	,
# 		'Asp' =>
# 		{
# 		, 'typemap' =>
# 			{ 'c' => 'class'
#			, 'd' => 'constant'
# 			, 'f' => 'function'
# 			, 's' => 'subroutine'
# 			, 'v' => 'variable'
# 			}
# 		, 'langid' => 3
# 		}
	,
		'Awk' =>
		{ 'identdef' => '[a-zA-Z_@]\w*'
			# List collected from
			# http://www.gnu.org/software/gawk/manual/gawk.html
		, 'reserved' => [ qw(
			BEGIN	BEGINFILE
			break
			case	continue
			default	delete	do
			END	 	ENDFILE	else	exit
			for		func	function
			getline
			if		in		@include
			print	printf
			read	return
			switch
			next	nextfile
			while
						) ]
			# To exclude the built-in functions from cross-reference,
			# uncomment the following lines up to and not including
			# the --- sentinel ---,
			# then move the block before the previous ) ].
			# NOTE:	this is necessary because you cannot comment
			#		between qw( and ) !
# 			atan2	cos	exp	int	log	rand	sin	sqrt	srand
# 			asort	asorti	gensub	gsub	index	length
# 			match	patsplit	split	sprintf	strtonum
# 			sub		substr	tolower		toupper
# 
# 			close	fflush	system
# 			mktime	strftime	systime
# 
# 			and	compl	lshift	or	rshift	xor
# 			isarray
# 			bindtextdomain	dcgettext	dcngettext
# 		--- End of built-in list ---
		, 'spec' =>
			[ { 'comment'	=> [ '#',         "\$" ] }
			, { 'string'	=> [ '"',         '"',   '\\\\.' ] }
			, { 'string'	=> [ '/',         '/',   '\\\\.' ] }
				# for regexps in fact
			, { 'include'	=> [ '@include', "\$" ] }
			]
		, 'include' =>
			{ 'directive' => '(@include)(\s+)(")((?:\\\\.|.)+)(")'
			}
		, 'typemap' =>
			{ 'f' => 'function'
			}
		, 'langid' => 4
		}
# 	,
# 		'Basic' =>
# 		{
#		, 'typemap' =>
#			{ 'c' => 'constant'
#			, 'f' => 'function'
#			, 'g' => 'enum'
#			, 'l' => 'label'
#			, 't' => 'type'
#			, 'v' => 'variable'
#			}
# 		, 'langid' => 5
# 		}
# 	,
# 		'Beta' =>
# 		{
#		, 'typemap' =>
#			{ 'f' => 'fragment'
#			, 'p' => 'pattern'
#			, 's' => 'slot'
#			, 'v' => 'virtual or rebound'
#			}
# 		, 'langid' => 6
# 		}
 	,
		'C' =>
		{ 'identdef' => '([_a-zA-Z~]|#\s*)[\w]*'
		, 'reserved' => [ qw(
			auto
			break
			case     char    const    continue
			default  do      double
			else     enum    extern
			float    for
			goto
			if       int     long
			register return
			short    signed  sizeof   static  struct  switch
			typedef
			union    unsigned
			void     volatile
			while
			#include #define #ifdef   #else   #elif
			#ifndef  #endif  #if      #undef  #error
			#pragma
			defined              
						) ]
		, 'spec' =>
			[ { 'comment'	=> [ '/\*',         '\*/'] }
			, { 'comment'	=> [ '//',          "\$" ] }
			, { 'string'	=> [ '"',           '"',   '\\\\.' ] }
			, { 'string'	=> [ "'",           "'",   "\\\\." ] }
			, { 'include'	=> [ '#\s*include', "\$" ] }
			]
		,	'typemap' =>
			{ 'c' => 'class'
			, 'd' => 'macro (un)definition'
			, 'e' => 'enumerator'
			, 'f' => 'function definition'
			, 'g' => 'enumeration name'
# 			, 'i' => 'interface'
			, 'l' => 'local variable'
			, 'm' => 'class, struct, or union member'
			, 'n' => 'namespace'
			, 'p' => 'function prototype or declaration'
			, 's' => 'structure name'
			, 't' => 'typedef'
			, 'u' => 'union name'
			, 'v' => 'variable definition'
			, 'x' => 'extern or forward variable declaration'
			}
		, 'langid' => 7
		}
	,
		'C++' =>
		{ 'identdef' => '([_a-zA-Z~]|#\s*)[\w]*'
		, 'reserved' => [ qw(
			and        and_eq     asm       auto
			bitand     bitor      bool      break
			case       catch      char      class
			const      const_cast continue
			default    delete     do        double  dynamic_cast
			else       enum       explicit  export  extern
			false      float      for       friend
			goto
			if         inline     int
			long
			mutable
			namespace  new        not        not_eq
			operator   or         or_eq
			private    protected  public
			register   reinterpret_cast      return
			short      signed     sizeof     static static_cast
			struct     switch
			template   this       throw      true   try
			typedef    typeid     typename
			union      unsigned   using
			virtual    void       volatile
			wchar_t    while
			xor        xor_eq
			#include   #define    #ifdef     #else   #elif
			#ifndef    #endif     #if        #undef  #error
			#pragma
			defined
						) ]
		, 'spec' =>
				[ { 'comment'	=> [ '/\*',         '\*/'] }
				, { 'comment'	=> [ '//',          "\$" ] }
				, { 'string'	=> [ '"',           '"',   '\\\\.' ] }
				, { 'string'	=> [ "'",           "'",   "\\\\." ] }
				, { 'include'	=> [ '#\s*include', "\$" ] }
				]
		, 'typemap' =>
			{ 'c' => 'class'
			, 'd' => 'macro (un)definition'
			, 'e' => 'enumerator'
			, 'f' => 'function definition'
			, 'g' => 'enumeration name'
# 			, 'i' => 'interface'
			, 'l' => 'local variable'
			, 'm' => 'class, struct, or union member'
			, 'n' => 'namespace'
			, 'p' => 'function prototype or declaration'
			, 's' => 'structure name'
			, 't' => 'typedef'
			, 'u' => 'union name'
			, 'v' => 'variable definition'
			, 'x' => 'extern or forward variable declaration'
			}
		, 'langid' => 8
		}
# 	,
# 		'C#' =>
# 		{
# 		, 'typemap' =>
# 			{ 'c' => 'class'
# 			, 'd' => 'macro (un)definition'
# 			, 'e' => 'enumerator'
#			, 'E' => 'event'
# 			, 'f' => 'field'
# 			, 'g' => 'enumeration name'
# 			, 'i' => 'interface'
# 			, 'l' => 'local variable'
# 			, 'm' => 'method'
# 			, 'n' => 'namespace'
# 			, 'p' => 'property'
# 			, 's' => 'structure name'
# 			, 't' => 'typedef'
# 			}
# 		, 'langid' => 9
# 		}
	,
		'Cobol' =>
		{ 'identdef' => '[\w]+'
		, 'flags' => [ 'case_insensitive' ]
				# First line is extended keywords, others are ANSI keywords
		, 'reserved' => [ qw(
			LIKE, END-IF

			ACCEPT          ACCESS          ADD          ADVANCING
			AFTER           ALL             ALPHABET     ALPHABETIC
			ALPHABETICLOWER ALPHABETICUPPER ALPHANUMERIC ALPHANUMERICEDITED
			ALSO            ALTER           ALTERNATE    AND
			ANY             ARE             AREA         AREAS
			ASCENDING       ASSIGN          AT           AUTHOR

			BEFORE          BINARY          BLANK        BLOCK
			BOTTOM BY

			CALL           CANCEL         CD             CF
			CH             CHARACTER      CHARACTERS     CLASS
			CLOCKUNITS     CLOSE          COBOL          CODE
			CODESET        COLLATING      COLUMN         COMMA
			COMMON         COMMUNICATION  COMP           COMP0
			COMP1          COMP2          COMP3          COMP4
			COMP5          COMP6          COMPUTATIONAL  COMPUTATIONAL0
			COMPUTATIONAL1 COMPUTATIONAL2 COMPUTATIONAL3 COMPUTATIONAL4
			COMPUTATIONAL5 COMPUTATIONAL6 COMPUTATIONALX COMPUTE
			COMPX          CONFIGURATION  CONTAINS       CONTENT
			CONTINUE       CONTROL        CONTROLAREA    CONTROLS
			CONVERTING     COPY           CORR           CORRESPONDING
			COUNT          CURRENCY

			DATA         DATE       DATECOMPILED DATEWRITTEN
			DAY          DAYOFWEEK  DE           DEBUGCONTENTS
			DEBUGGING    DEBUGITEM  DEBUGLINE    DEBUGNAME
			DEBUGSUB1    DEBUGSUB2  DEBUGSUB3    DECIMALPOINT
			DECLARATIVES DELETE     DELIMITED    DELIMITER
			DEPENDING    DESCENDING DESTINATION  DETAIL
			DISABLE      DISPLAY    DIVIDE       DIVISION
			DOWN         DUPLICATES DYNAMIC

			EGI         ELSE      EMI         ENABLE
			END         ENDADD    ENDCALL     ENDCOMPUTE
			ENDDELETE   ENDDIVIDE ENDEVALUATE ENDIF
			ENDMULTIPLY ENDOFPAGE ENDPERFORM  ENDREAD
			ENDRECEIVE  ENDRETURN ENDREWRITE  ENDSEARCH
			ENDSTART    ENDSTRING ENDSUBTRACT ENDUNSTRING
			ENDWRITE    ENTER     ENVIRONMENT EOP
			EQUAL       ERROR     ESI         EVALUATE
			EVERY       EXCEPTION EXIT        EXTEND
			EXTERNAL

			FALSE  FD    FILE    FILECONTROL
			FILLER FINAL FIRST   FOOTING
			FOR    FROM  FUNCTION

			GENERATE GIVING GLOBAL GO
			GREATER  GROUP

			HEADING HIGHVALUE HIGHVALUES

			IDENTIFICATION IF       IN          INDEX
			INDEXED        INDICATE INITIAL     INITIALIZE
			INITIATE       INPUT    INPUTOUTPUT INSPECT
			INSTALLATION   INTO     INVALID     IO
			IOCONTROL

			JUST JUSTIFIED

			KEY

			LABEL  LAST          LEADING LEFT
			LENGTH LESS          LIMIT   LIMITS
			LINAGE LINAGECOUNTER LINE    LINECOUNTER
			LINES  LINKAGE       LOCK    LOWVALUE
			LOWVALUES

			MEMORY  MERGE      MESSAGE MODE
			MODULES MORELABELS MOVE    MULTIPLE
			MULTIPLY

			NATIVE NEGATIVE NEXT    NO
			NOT    NUMBER   NUMERIC NUMERICEDITED

			OBJECTCOMPUTER OCCURS OF           OFF
			OMITTED        ON     OPEN         OPTIONAL
			OR             ORDER  ORGANIZATION OTHER
			OUTPUT         OVERFLOW

			PACKEDDECIMAL PADDING  PAGE      PAGECOUNTER
			PERFORM       PF       PH        PIC
			PICTURE       PLUS     POINTER   POSITION
			POSITIVE      PRINTING PROCEDURE PROCEDURES
			PROCEED       PROGRAM  PROGRAMID PURGE

			QUEUE QUOTE QUOTES

			RANDOM    RD         READ      RECEIVE
			RECORD    RECORDS    REDEFINES REEL
			REFERENCE REFERENCES RELATIVE  RELEASE
			REMAINDER REMOVAL    RENAMES   REPLACE
			REPLACING REPORT     REPORTING REPORTS
			RERUN     RESERVE    RETURN    REVERSED
			REWIND    REWRITE    RF        RH
			RIGHT     ROUNDED    RUN

			SAME       SD        SEARCH       SECTION
			SECURITY   SEGMENT   SEGMENTLIMIT SELECT
			SEND       SENTENCE  SEPARATE     SEQUENCE
			SEQUENTIAL SET       SIGN         SIZE
			SORT       SORTMERGE SOURCE       SOURCECOMPUTER
			SPACE      SPACES    SPECIALNAMES STANDARD
			STANDARD1  STANDARD2 START        STATUS
			STOP       STRING    SUBQUEUE1    SUBQUEUE2
			SUBQUEUE3  SUBTRACT  SUM          SUPER
			SUPPRESS   SYMBOLIC  SYNC         SYNCHRONIZED

			TALLYING TAPE TERMINAL TERMINATE
			TEST     TEXT THAN     THEN
			THROUGH  THRU TIME     TIMES
			TO       TOP  TRAILING TRUE
			TYPE

			UNIT UNSTRING UNTIL UP
			UPON USAGE    USE   USING

			VALUE VALUES VARYING

			WHEN  WITH WORDS WORKINGSTORAGE
			WRITE

			ZERO ZEROES ZEROS
						) ]
		, 'spec' =>
			[ { 'comment'	=> [ '^[\d ]*\*', '$' ] }
			, { 'string'	=> [ '"',         '"' ] }
			]
		, 'typemap' =>
			{ 'd' => 'data item'
			, 'f' => 'file description'
			, 'g' => 'group item'
			, 'p' => 'paragraph'
			, 'P' => 'program id'
			, 's' => 'section'
			}
		, 'langid' => 10
		}
# 	,
# 		'DosBatch' =>
# 		{
# 		, 'typemap' =>
# 			{ 'l' => 'label'
# 			, 'v' => 'variable'
# 			}
# 		, 'langid' => 11
# 		}
# 	,
# 		'Eiffel' =>
# 		{
# 		, 'typemap' =>
# 			{ 'c' => 'class'
#			, 'f' => 'feature'
# 			, 'l' => 'local entity'
# 			}
# 		, 'langid' => 12
# 		}
# 	,
# 		'Erlang' =>
# 		{
# 		, 'typemap' =>
# 			{ 'd' => 'macro definition'
#			, 'f' => 'function'
#			, 'm' => 'module'
# 			, 'r' => 'record'
# 			}
# 		,'langid' => 13
# 		}
# 	,
# 		'Flex' =>
# 		{
# 		, 'typemap' =>
# 			{ 'c' => 'class'
#			, 'f' => 'function'
# 			, 'm' => 'method'
#			, 'p' => 'property'
#			, 'v' => 'global variable'
#			, 'x' => 'mxtag'
# 			}
# 		, 'langid' => 14
# 		}
	,
		'Fortran' =>
		# This preliminary Fortran definition is valid only for the
		# '77 description of the language provided textis not "pathological"
		# in its use of spaces (i.e. words are written as well defined
		# units, such as GOTO and not G O T O and spaces separate words).
		# NOTE: the parser knows nothing of Fortran formatting. Columns
		#		1-5 are not reserved for labels, column 6 for continuation
		#		and column 73-80 for controls.
		#		Source text will probably be incorrectly parsed if there
		#		is anything beyond column 73.
		#		Labels should not be an issue since they are numeric.
		{ 'identdef' => '\\.?[A-Za-z][A-Za-z0-9]*\\.?'
		, 'flags' => [ 'case_insensitive' ]
			# In Fortran, keywords are NOT reserved, but LXR considers
			# them as reserved. Consequently, if user variables or
			# procedures have the same name as a key word, they will
			# not be recognised by LXR.
		, 'reserved' => [ qw(
			BACKSPACE   BLOCK     BLOCKDATA
			CALL        CHARACTER CLOSE     COMMON COMPLEX
			CONTINUE
			DATA        DO        DOUBLE
			ELSE        ELSEIF    END       ENDIF  ENTRY
			EQUIVALENCE EXTERNAL
			FORMAT      FUNCTION
			GO          GOTO
			IF          IMPLICIT  INTEGER   INTRINSIC
			LOGICAL
			NONE
			OPEN
			PARAMETER   PAUSE     PRECISION PRINT  PROGRAM
			READ        REAL      RETURN    REWIND
			STOP        SUBROUTINE
			THEN        TO
			WRITE
			.AND. .NOT. .OR.
			.EQ.  .NE.  .GT.  .GE.  .LE.  .LT.
						) ]
		, 'spec' =>
			[ { 'comment'	=> [ '^[Cc*]', '$' ] }
			, { 'string' 	=> [ "'",      "'" ] }
			# Can't capture Hollerith string with a pattern
			# Need a specific parser for that
			]
		, 'typemap'  =>
			{ 'b' => 'block data'
			, 'c' => 'common block'
			, 'e' => 'entry point'
			, 'f' => 'function'
			, 'i' => 'interface'
			, 'k' => 'type component'
			, 'l' => 'label'
			, 'L' => 'local and common block variable'
			, 'm' => 'module'
			, 'n' => 'namelist'
			, 'p' => 'program'
			, 's' => 'subroutine'
			, 't' => 'derived type or structure'
			, 'v' => 'global or module variable'
			}
		, 'langid' => 15
		}
	,
		'HTML' =>		# HTML 4.01 only
		{ 'identdef' => '[a-zA-Z][\w]*'
		, 'flags' => [ 'case_insensitive' ]
		, 'reserved' => [ qw(
			a        abbr    acronym  address applet
			area
			b        base    basefont bdo     big
			blockquote body  br       button
			caption  center  cite     code    col
			colgroup
			dd       del     dfn      dir     div
			dl       dt
			em
			fieldset font    form     frame   frameset
			h1       h2      h3       h4      h5
			h6       head    hr       html
			i        iframe  img      input   ins
			isindex
			kbd
			label    legend  li       link
			map      menu    meta
			noframes noscript
			object   ol      optgroup option
			p        param   pre
			q
			s        samp    script   select  small
			span     strike  strong   style   sub
			sup
			table    tbody   td       textarea tfoot
			th       thead   title    tr      tt
			u        ul
			var
						) ]
		, 'spec' =>
			[ { 'comment'	=> [ '<!--', '-->'] }
			, { 'string' 	=> [ '"',    '"' ] }
			, { 'string' 	=> [ "'",    "'" ] }
			, { 'include'	=> [ '(?:href|longdesc|src)="', '"' ] }
			, { 'include'	=> [ "(?:href|longdesc|src)='", "'" ] }
		# The next one for HTML character entity, but UNSAFE
		# because & can be found in unprotected query strings
			, { 'string' 	=> [ "&",    ";" ] }
			]
		, 'include' =>
			{ 'directive' => '(\w+=)()("|\')(.+)("|\')'
			, 'global' =>	[ '&quot;', '"'
							, '&#34',      '"', '&#39',      "'"
							, '(?i)&#x22', '"', '(?i)&#x27', "'"
							]
			}
		, 'typemap'  =>
			{ 'a' => 'named anchor'
			, 'f' => 'JavaScript function'
			}
		,	'langid' => 16
		}
	,
		'Java' =>
		{ 'identdef' => '[\w]+'
			# List collected from
			# http://en.wikibooks.org/wiki/Java_Programming/Keywords
		, 'reserved' => [ qw(
			abstract assert
			boolean  break      byte
			case     catch      char      class  const
			continue
			default  do         double
			else     enum       extends
			false    final      finally   float  for
			goto
			if       implements import    instanceof
			int      interface
			long
			native   new        null
			package  private    protected public
			return
			short    static     strictfp  super  switch
			synchronized
			this     throw      throws    transient
			true     try
			void     volatile
			while
						)]
		, 'spec' =>
			[ { 'comment'	=> [ '/\*',     '\*/'] }
			, { 'comment'	=> [ '//',      "\$" ] }
			, { 'string' 	=> [ '"',       '"', '\\\\.' ] }
			, { 'string' 	=> [ "'",       "'", "\\\\." ] }
			, { 'include'	=> [ 'import',  ";" ] }
			, { 'include'	=> [ 'package', ";" ] }
			]
		, 'typemap' =>
			{ 'c' => 'class'
			, 'e' => 'enumerator'
			, 'f' => 'field'
			, 'g' => 'enum type'
			, 'i' => 'interface'
			, 'l' => 'local variable'
			, 'm' => 'method'
			, 'p' => 'package'
			}
		, 'langid' => 17
		}
	,
		'JavaScript' =>
		{ 'identdef' => '[\w$]+'
			# Keyword list not checked thoroughly!
			# Following capitalized keywords where submitted by
			# an user (contructors?):
			# , 'Arguments', 'Array', 'Date', 'Number', 'Object'
			# , 'RegExp', 'String', 'Undefined'
		, 'reserved' => [ qw(
			abstract
			boolean  break    byte
			case     catch    char      class     const
			continue
			debugger default   delete   do
			double
			else     enum     export    extends
			false    final    finally   float     for
			function
			goto
			if       implements import  in        instanceof
			int      interface
			let      long
			native   new      null
			package  private  protected public
			return
			short    static    super    switch    synchronized
			this     throw    throws    transient true
			try      typeof
			var      void     volatile
			while    with
			yield
						) ]
		, 'spec' =>
			[ { 'comment'	=> [ '/\*',     '\*/'] }
			, { 'comment'	=> [ '//',      "\$" ] }
			, { 'string' 	=> [ '"',       '"', '\\\\.' ] }
			, { 'string' 	=> [ "'",       "'", "\\\\." ] }
			]
		, 'typemap' =>
			{ 'c' => 'class'
			, 'f' => 'function'
			, 'm' => 'method'
			, 'p' => 'property'
			, 'v' => 'variable'
			}
		, 'langid' => 18
		}
# 	,
# 		'Lisp' =>
# 		{
# 		, 'typemap' =>
# 			{ 'f' => 'function'
# 			}
# 		, 'langid' => 19
# 		}
# 	,
# 		'Lua' =>
# 		{
# 		, 'typemap' =>
# 			{ 'f' => 'function'
# 			}
# 		, 'langid' => 20
# 		}
	,
		'Make' =>
		{ 'identdef' => '[\w-]+'
			# List collected from
			# http://www.gnu.org/software/make/manual/html_node/Quick-Reference.html
			#	First part of list contains keywords, second functions
		, 'reserved' => [ qw(
			define   endef    undefine
			ifdef    ifndef   ifeq      ifneq  else  endif
			include  -include sinclude
			override
			export   unexport
			private
			vpath

			subst     patsubst  strip
			finstring filter    filter-out
			sort word words     wordlist
			firstword lastword
			dir       notdir    suffix  basename
			addsuffix addprefix join
			wildcard  realpath  abspath
			error     warning   shell   origin flavor
			foreach   if or  and
			call      eval      value
						) ]
		, 'spec'     =>
			[ { 'comment'	=> [ '#', "\$"] }
			, { 'string'	=> [ '"', '"' ] }
			, { 'string'	=> [ "'", "'" ] }
			, { 'include'	=> [ '[s-]?include\s', '\$'] }
			]
	# Multiple inclusion is handled in the specific parser.
		, 'typemap' => { 'm' => 'macro' }
		, 'langid'  => 21
		}
# 	,
# 		'Matlab' =>
# 		{
#		, 'typemap' => { 'f' => 'function' }
# 		, 'langid' => 22
# 		}
# 	,
# 		'Ocaml' =>
# 		{
# 		, 'typemap' =>
# 			{ 'c' => 'class'
#			, 'C' => 'constructor'
# 			, 'e' => 'exception'
# 			, 'f' => 'function'
#			, 'm' => 'method'
# 			, 'M' => 'module or functor'
# 			, 'r' => 'record field'
#			, 't' => 'type'
# 			, 'v' => 'global variable'
# 			}

# 		, 'langid' => 23
# 		}
	,
		'Pascal' =>
		{ 'identdef' => '[a-zA-z][\w]+'
		, 'flags' => [ 'case_insensitive' ]
		, 'reserved' => [ qw(
			and   array
			begin
			case  const
			div   do    downto
			else  end
			file  for   function
			goto
			if implementation in interface
			label
			mod
			nil   not
			of    or
			packed procedure program
			record repeat
			set
			then  to    type
			unit  until uses
			var
			while with
			read  readln write writeln
						) ]
		, 'spec'     =>
			[ { 'comment'	=> [ '{', '}'] }
			, { 'comment'	=> [ '\\(\\*', '\\*\\)' ] }
			, { 'comment'	=> [ '//', '$' ] }
			, { 'string'	=> [ "'", "'" ] }
			, { 'include'	=> [ 'uses', ';' ] }
			]
		, 'include' =>
			{ 'directive' => '([\w]+)(\s+)()([\w]+)()'
			, 'post'   => [ '\$', '.pas' ]
			}
		, 'typemap' =>
			{ 'f' => 'function'
			, 'p' => 'procedure'
			}
		, 'langid'   => 24
		}
	,
		'Perl' =>
		{ 'identdef' => '[-_a-zA-Z][\w]*'
		    # The following have been derived from the perlfunc and perlsyn documentation
		    # for perl v5.10.0
			# AUTOLOAD and DESTROY omitted so that they are tagged
			# as subs and referenced
		, 'reserved' => [ qw(
			-A
			abs        accept     alarm      and       atan2
			-b         -B
			BEGIN      bind       binmode    bless     break
			-c         -C
			caller     chdir      CHECK      chmod     chomp
			chop       chown      chr        chroot    close
			closedir   cmp        connect    continue  CORE
			cos        crypt
			-d
			__DATA__   dbmclose   dbmopen    default   defined
			delete     die        do         dump
			-e
			each       else       elsif      END       __END__
			endgrent   endhostent endnetent  endprotoent endpwent
			endservent eof        eq         eval      evalbytes
			exec       exists     exit       exp
			-f
			fc         fcntl      __FILE__   fileno    flock
			for        foreach    fork       format    formline
			-g
			ge         getc       getgrent   getgrgid  getgrnam
			gethostbyaddr gethostbyname gethostent getlogin getnetbyaddr
			getnetbyname  getnetent getpeername getpgrp getppid
			getpriority getprotobyname getprotobynumber getprotoent getpwent
			getpwnam   getpwuid   getservbyname getservbyport getservent
			getsockname getsockopt given     glob      gmtime
			goto       grep       gt
			hex
			if         import     index      INIT      int
			ioctl
			join
			-k
			keys       kill
			-l
			last       lc         lcfirst    le        length
			__LINE__   link       listen     local     localtime
			lock       log        lstat      lt
			m          -M
			map        mkdir      msgctl     msgget    msgrcv
			msgsnd     my
			ne         next       no         not
			-o         -O
			oct        open       opendir    or        ord
			our
			-p
			pack       __PACKAGE__ package   pipe      pop
			pos        print      printf     prototype push
			q          qq         qr         quotemeta
			qw         qx
			-r         -R
			rand       read       readdir    readline  readlink
			readpipe   recv       redo       ref       rename
			require    reset      return     reverse   rewinddir
			rindex     rmdir
			s          -s         -S
			say        scalar     seek       seekdir   select
			semctl     semget     semop      send      setgrent
			sethostent setnetent  setpgrp    setpriority setprotoent
			setpwent   setservent setsockopt shift     shmctl
			shmget     shmread    shmwrite   shutdown  sin
			sleep      socket     socketpair sort      splice
			split      sprintf    sqrt       srand     stat
			state      study      sub        __SUB__   substr
			symlink    syscall    sysopen    sysread   sysseek
			system     syswrite
			-t         -T
			tell       telldir    tie        tied      time
			times      tr         truncate
			-u
			uc         ucfirst    umask      undef     UNITCHECK
			unless     unlink     unpack     unshift   untie
			until      use        utime
			values     vec
			-w         -W
			wait       waitpid    wantarray  warn      when
			while      write
			-x           -X       x          xor
			y
			-z
						) ]
		, 'spec'     =>
			[ { 'atom'	=>	 '(?:\$#?\w+'
							.'|\\\\.'
							.'|\b(s|tr|y)\b\s*'
								.'(?:(?:\{(?:\\\\.|.)*?\}){2}'
								.'|(?:\[(?:\\\\.|.)*?\]}){2}'
								.'|(?:\((?:\\\\.|.)*?\)){2}'
								.'|(?:\<(?:\\\\.|.)*?\>){2}'
								.'|(.)(?:(?:\\\\.|.)*?\g{-1}){2}'
								.')'
							.'|\b(q[qrwx]?|m)\b\s*'
								.'(?:\{(?:\\\\.|.)*?\}'
								.'|\[(?:\\\\.|.)*?\]'
								.'|\((?:\\\\.|.)*?\)'
								.'|\<(?:\\\\.|.)*?\>'
								.'|(.)(?:\\\\.|.)*?\g{-1}'
								.')'
							.')' }
	# NOTE:	This complicated 'atom' is an attempt not to lose control
	#		through quote and regexp operators. It is not 100%
	#		bullet-proof. It can't handle nested m{ {...} } for instance.

			, { 'include'	=> ['\buse\s+',     ';'] }
			, { 'include'	=> ['\brequire\s+', ';'] }
			, { 'string'	=> ['"',            '"',      '\\\\.'] }
			, { 'string'	=> ["'",            "'",      "\\\\."] }
			, { 'string'	=> ['\\`',          '\\`',    '\\\\.'] }
			, { 'comment'	=> ['#',            "\$"] }
			, { 'comment'	=> ["^=\\w+",       "^=cut"] }
			]
	# The following include rules are more efficiently implemented
	# in the Perl.pm module. They are shown as an example of
	# 'pre', 'global' and 'post' processing.
	# Uncomment only if Perl.pm is not part of LXR
	#	, 'include' =>
	#		{ 'directive' => '([\w]+)(\s+)()([\w:]+\b)()'
	#		, 'global' => [ '::', '/' ]
	#		, 'post'   => [ '\$', '.pm' ]
	#		}
		, 'typemap' =>
			{ 'c' => 'constant'
			, 'f' => 'format'
			, 'l' => 'label'
			, 'p' => 'package'
			, 's' => 'subroutine'
			, 'd' => 'subroutine declaration'
			}
		, 'langid' => 25
		}
	,
		'PHP' =>
		{ 'identdef' => '[\w]+'
			# List collected from http://www.php.net
		, 'reserved' => [ qw(
			__halt_compiler
			abstract  and        array      as
			break
			callable  case       catch      class
			clone     const      continue
			declare   default
			die       do
			echo      else
			elseif    empty      enddeclare endfor
			endforeach endif     endswitch  endwhile
			eval      exit       extends
			final     for        foreach    function
			global    goto
			if        implements include    include_once
			instanceof insteadof interface  isset
			list
			namespace new
			or
			print     private    protected  public
			require   require_once return
			static    switch
			throw     trait      try
			unset     use
			var
			while
			xor
			__CLASS__ __DIR__    __FILE__   __FUNCTION__
			__LINE__  __METHOD__ __NAMESPACE__ __TRAIT__
			PHP_VERSION         PHP_MAJOR_VERSION PHP_MINOR_VERSION
			PHP_RELEASE_VERSION PHP_VERSION_ID    PHP_EXTRA_VERSION
			PHP_ZTS             PHP_DEBUG         PHP_MAXPATHLEN
			PHP_OS              PHP_SAPI          PHP_EOL
			PHP_INT_MAX         PHP_INT_SIZE      DEFAULT_INCLUDE_PATH
			PEAR_INSTALL_DIR    PEAR_EXTENSION_DIR PHP_EXTENSION_DIR
			PHP_PREFIX          PHP_BINDIR        PHP_BINARY
			PHP_MANDIR          PHPLIBDIR         PHP_DATADIR
			PHP_SYSCONFDIR      PHP_LOCALSTATEDIR PHP_CONFIG_FILE_PATH
			PHP_CONFIG_FILE_SCAN_DIR PHP_SHLIB_SUFFIX
			E_ERROR         E_WARNING
			E_PARSE         E_NOTICE
			E_CORE_ERROR    E_CORE_WARNING
			E_COMPILE_ERROR E_COMPILE_WARNING
			E_USER_ERROR    E_USER_WARNING
			E_USER_NOTICE
			E_DEPRECATED    E_USER_DEPRECATED
			E_ALL           E_STRICT
			__COMPILER_HALT_OFFSET__
			FALSE NULL TRUE
			PHP_SELF        
			Directory stdClass  __PHP_Incomplete_Class
			Exception php_user_filter Closure
			self      parent
						) ]
		, 'spec' =>
			[ { 'comment'	=> [ '/\\*',         '\*/' ] }
			, { 'comment'	=> [ '//',           "\$" ] }
			, { 'comment'	=> [ '#',            "\$" ] }
			# TODO: Heredoc and Nowdoc if it makes sense
			#		to consider them comments
			, { 'string'	=> [ '"',            '"', '\\\\.' ] }
			, { 'string'	=> [ "'",            "'", '\\\\.' ] }
			, { 'include'	=> [ 'require',      "\$" ] }
			, { 'include'	=> [ 'include',      "\$" ] }
			, { 'include'	=> [ 'require_once', "\$" ] }
 			, { 'include'	=> [ 'include_once', "\$" ] }
			],
		, 'include' =>
			{ 'directive' => '([\w]+)(\s*)(\\(\\s*[\'"])([^\'"]+)("\\s*\\))'
			}
		, 'typemap' =>
			{ 'c' => 'class'
			, 'd' => 'constant definition'
			, 'f' => 'function'
			, 'i' => 'interface'
			, 'j' => 'JavaScript function'
			, 'v' => 'variable'
			}
		, 'langid' => 26
		}
	,
		'Python' =>
		{ 'identdef' => '[\w]+'
		, 'reserved' => [ qw(
			and     as       assert
			break
			class   continue
			def     del
			elif    else     except exec
			False   finally  for    from
			global
			if      import   in     is
			lambda
			None    not
			or
			pass    print
			raise   return
			self
			True    try
			while   with
			yield
						) ]
		, 'spec' =>
			[ { 'comment'	=> [ '#',   "\$" ] }
			, { 'string'	=> [ '"""', '"""', '\\\\.' ] }
			, { 'string'	=> [ "'''", "'''", "\\\\." ] }
			, { 'string'	=> [ '"',   '"',   '\\\\.' ] }
			, { 'string'	=> [ "'",   "'",   "\\\\." ] }
			, { 'include'	=> [ '\bimport\b', "\$" ] }
			, { 'include'	=> [ '\bfrom\b',   "\$" ] }
			]
	# Include rules implemented in Python.pm to cope with an
	# endlessly looping case under 'include' patterns.
		, 'typemap' =>
			{ 'c' => 'class'
			, 'f' => 'function'
			, 'i' => 'import'
			, 'm' => 'class member'
			, 'v' => 'variable'
			}
		, 'langid' => 27
		}
# 	,
# 		'REXX' =>
# 		{
# 		, 'typemap' =>
# 			{ 's' => 'subroutine'
# 			}
# 		, 'langid' => 28
# 		}
	,
		'Ruby' =>
		{ 'identdef' => '[@$]?[a-zA-Z_][\w]*[?!=]?'
			# List collected from
			# http://en.wikibooks.org/wiki/Ruby_Programming
		, 'reserved' => [ qw(
			alias and
			BEGIN begin  break
			case  class
			def   defined?     do
			else  elsif  END   end ensure
			false for
			if    in
			module
			next  nil    not
			or
			redo  rescue retry return
			self  super
			then  true
			undef unless until
			when  while
			yield
			__FILE__ __LINE__
						) ]
		, 'spec' =>
			[ { 'comment'	=> [ '^=begin',  '^=end'] }
			, { 'comment'	=> [ '#',       "\$"] }
			, { 'string' 	=> [ '"',       '"'
					, '\\\\(?:(?:[CM]-|c)[^\\\\]?|\$|.)' ] }
			, { 'string' 	=> [ "'",       "'"
					, '\\\\(?:(?:[CM]-|c)[^\\\\]?|\$|.)' ] }
			, { 'string' 	=> [ '\\`',     '\\`'
					, '\\\\(?:(?:[CM]-|c)[^\\\\]?|\$|.)' ] }
			# The following def does not handle nested construct
			, { 'string' 	=>	[ '\%[qQrs]?'
								. '(?:\\([^(]*?\\)'
								. '|\\[[^(]*?\\]'
								. '|\\{[^(]*?\\}'
								. '|\\<[^(]*?\\>'
 								. '|([\W]).*?\g{-1}'
								. ')'
							   ] }
# 			, { 'string' 	=> [ "(?<!:):(?:[!%^&*/|+-]|[@$]?[A-Za-z_]+?)", '[A-Za-z_0-9!?=]*(?![A-Za-z_0-9!?=])' ] }
			, { 'include'	=> [ 'require', "\$" ] }
			, { 'include'	=> [ 'load',    "\$" ] }
			]
		, 'typemap' =>
			{ 'c' => 'class'
			, 'f' => 'method'
			, 'm' => 'module'
			, 'F' => 'singleton method'
			}
	# 'include' processing is implemented more efficiently
	# in module Ruby.pm.
	# Uncomment only if Ruby.pm is not part of LXR
	#	, 'include' =>
	#		{ 'directive' => '([\w]+)(\s+)(["\'])(.+)(["\'])'
	#		, 'post'   => [ '(?<!\.rb)$', '.rb' ]
	#		}
		, 'langid' => 29
		}
# 	,
# 		'Scheme' =>
# 		{
# 		, 'typemap' =>
# 			{ 'f' => 'function'
# 			, 's' => 'set'
# 			}
# 		, 'langid' => 30
# 		}
	,
		'shell' =>
		{ 'identdef' => '[\w]+'
		, 'reserved' => [ qw(
			break
			case continue cp
			do   done
			echo elif else esac
			fi   for
			if   in
			ln   ls
			mv
			pwd
			sed
			then
			until
			while
						) ]
		, 'spec' =>
			[ { 'comment'	=> [ '#', '$' ] }
			, { 'string'	=> [ '"', '"' ] }
			, { 'string'	=> [ "'", "'" ] }
			]
		, 'typemap' => { 'f' => 'function' }
		, 'langid'  => 31
		}
# 	,
# 		'Slang' =>
# 		{ 'identdef' => '[\w]+'
# 		, 'typemap' =>
# 			{ 'f' => 'function'
# 			, 'n' => 'namespace'
# 			}
# 		, 'langid' => 32
# 		}
# 	,
# 		'SML' =>
# 		{ 'identdef' => '[\w]+'
# 		, 'typemap' =>
# 			{ 'c' => 'functor'
#			, 'e' => 'exception'
# 			, 'f' => 'function'
# 			, 'r' => 'structure'
#			, 's' => 'signature'
# 			, 't' => 'type'
#			, 'v' => 'value binding'
# 			}
# 		, 'langid' => 33
# 		}
	,
		'SQL' =>
		{ 'identdef' => '[\w]+'
		, 'flags' => [ 'case_insensitive' ]
				# First line contains some Oracle reserved words.
				# Following lines contain SQL 89, 92 and 99 keywords
		, 'reserved' => [ qw(
			SEQUENCE SYNONYM SYSDATE

			ABSOLUTE ACTION     ADD           AFTER
			ALL      ALLOCATE   ALTER         AND
			ANY      ARE        ARRAY         AS
			ASC      ASENSITIVE ASSERTION     ASYMMETRIC
			AT       ATOMIC     AUTHORIZATION AVG

			BEFORE  BEGIN BETWEEN    BIGINT
			BINARY  BIT   BIT_LENGTH BLOB
			BOOLEAN BOTH  BREADTH    BY

			CALL          CALLED       CASCADE          CASCADED
			CASE          CAST         CATALOG          CHAR
			CHAR_LENGTH   CHARACTER    CHARACTER_LENGTH CHECK
			CLOB          CLOSE        COALESCE         COLLATE
			COLLATION     COLUMN       COMMIT           CONDITION
			CONNECT       CONNECTION   CONSTRAINT       CONSTRAINTS
			CONSTRUCTOR   CONTAINS     CONTINUE         CONVERT
			CORRESPONDING COUNT        CREATE           CROSS
			CUBE          CURRENT      CURRENT_DATE     CURRENT_DEFAULT_TRANSFORM_GROUP
			CURRENT_PATH  CURRENT_ROLE CURRENT_TIME     CURRENT_TIMESTAMP
			CURRENT_TRANSFORM_GROUP_FOR_TYPE CURRENT_USER CURSOR CYCLE

			DATA          DATE        DAY        DEALLOCATE
			DEC           DECIMAL     DECLARE    DEFAULT
			DEFERRABLE    DEFERRED    DELETE     DEPTH
			DEREF         DESC        DESCRIBE   DESCRIPTOR
			DETERMINISTIC DIAGNOSTICS DISCONNECT DISTINCT
			DO            DOMAIN      DOUBLE     DROP
			DYNAMIC       database

			EACH      ELEMENT  ELSE     ELSEIF
			END       EQUALS   ESCAPE   EXCEPT
			EXCEPTION EXEC     EXECUTE  EXISTS
			EXIT      EXTERNAL EXTRACT

			FALSE     FETCH    FILTER   FIRST    FLOAT
			FOR       FOREIGN  FOUND    FREE     FROM
			FULL      FUNCTION

			GENERAL GET   GLOBAL GO
			GOTO    GRANT GROUP  GROUPING

			HANDLER HAVING HOLD HOUR

			IDENTITY  IF          IMMEDIATE IN
			INDICATOR INITIALLY   INNER     INOUT
			INPUT     INSENSITIVE INSERT    INT
			INTEGER   INTERSECT   INTERVAL  INTO
			IS        ISOLATION   ITERATE   index

			JOIN

			KEY

			LANGUAGE LARGE LAST      LATERAL
			LEADING  LEAVE LEFT      LEVEL
			LIKE     LOCAL LOCALTIME LOCALTIMESTAMP
			LOCATOR  LOOP  LOWER

			MAP      MATCH  MAX   MEMBER
			MERGE    METHOD MIN   MINUTE
			MODIFIES MODULE MONTH MULTISET

			NAMES   NATIONAL NATURAL NCHAR
			NCLOB   NEW      NEXT    NO
			NONE    NOT      NULL    NULLIF
			NUMERIC

			OBJECT OCTET_LENGTH OF         OLD
			ON     ONLY         OPEN       OPTION
			OR     ORDER        ORDINALITY OUT
			OUTER  OUTPUT       OVER       OVERLAPS

			PAD       PARAMETER PARTIAL   PARTITION
			PATH      POSITION  PRECISION PREPARE
			PRESERVE  PRIMARY   PRIOR     PRIVILEGES
			PROCEDURE PUBLIC

			RANGE     READ    READS      REAL
			RECURSIVE REF     REFERENCES REFERENCING
			RELATIVE  RELEASE REPEAT     RESIGNAL
			RESTRICT  RESULT  RETURN     RETURNS
			REVOKE    RIGHT   ROLE       ROLLBACK
			ROLLUP    ROUTINE ROW        ROWS

			SAVEPOINT    SCHEMA    SCOPE        SCROLL
			SEARCH       SECOND    SECTION      SELECT
			SENSITIVE    SESSION   SESSION_USER SET
			SETS         SIGNAL    SIMILAR      SIZE
			SMALLINT     SOME      SPACE        SPECIFIC
			SPECIFICTYPE SQL       SQLCODE      SQLERROR
			SQLEXCEPTION SQLSTATE  SQLWARNING   START
			STATE        STATIC    SUBMULTISET  SUBSTRING
			SUM          SYMMETRIC SYSTEM       SYSTEM_USER

			TABLE       TABLESAMPLE TEMPORARY     THEN
			TIME        TIMESTAMP   TIMEZONE_HOUR TIMEZONE_MINUTE
			TO          TRAILING    TRANSACTION   TRANSLATE
			TRANSLATION TREAT       TRIGGER       TRIM
			TRUE        truncate

			UNDER   UNDO   UNION UNIQUE
			UNKNOWN UNNEST UNTIL UPDATE
			UPPER   USAGE  USER  USING

			VALUE VALUES VARCHAR VARYING
			VIEW

			WHEN   WHENEVER WHERE  WHILE
			WINDOW WITH     WITHIN WITHOUT
			WORK WRITE

			YEAR
			ZONE
						) ]
		, 'spec' =>
			[ { 'comment'	=> [ '/\*', '\*/' ] }
			, { 'comment'	=> [ '//',  "\$" ] }
			, { 'comment'	=> [ '--',  "\$" ] }
			, { 'string'	=> [  '"',   '"',   '\\\\.' ] }
			, { 'string'	=> [  "'",   "'",   "\\\\." ] }
			]
		, 'typemap' =>
			# Table below is for ctags built-in parser
# 			{ 'c' => 'cursor'
# 			, 'd' => 'prototype'
# 			, 'D' => 'domain'
# 			, 'e' => 'event'
# 			, 'f' => 'function'
# 			, 'F' => 'field'
# 			, 'i' => 'index'
# 			, 'l' => 'local variable'
# 			, 'L' => 'block label'
# 			, 'n' => 'synonym'
# 			, 'p' => 'procedure'
# 			, 'P' => 'package'
# 			, 'r' => 'record'
# 			, 'R' => 'service'
# 			, 's' => 'subtype'
# 			, 't' => 'table'
# 			, 'T' => 'trigger'
# 			, 'U' => 'publication'
# 			, 'v' => 'variable'
# 			, 'V' => 'view'
# 			, 'x' => 'Mobilink Table script'
# 			, 'y' => 'Mobilink Conn script'
# 			}
			# Table below is for regexp set in ectags.conf
			# overriding ctags built-in parser
			{ 'c' => 'constraint'
			, 'C' => 'cursor'
			, 'f' => 'field'
			, 'F' => 'function'
			, 'i' => 'index'
			, 'p' => 'package'
			, 'P' => 'procedure'
			, 's' => 'sequence'
			, 'S' => 'synonym'
			, 't' => 'table'
			, 'T' => 'trigger'
			, 'v' => 'view'
			}
		, 'langid' => 34
		}
# 	,
# 		'Tcl' =>
# 		{ 'identdef' => '[\w]+'
# 		, 'typemap' =>
# 			{ 'c' => 'class'
#			, 'm' => 'method'
# 			, 'p' => 'procedure'
# 			}
# 		, 'langid' => 35
# 		}
# 	,
# 		'Tex' =>
# 		{ 'identdef' => '[\w]+'
# 		, 'typemap' =>
# 			{ 'b' => 'subsubsection'
#			, 'c' => 'chapter'
# 			, 'G' => 'subparagraph'
#			, 'p' => 'part'
# 			, 'P' => 'paragraph'
# 			, 's' => 'section'
#			, 'u' => 'subsection'
# 			}
# 		, 'langid' => 36
# 		}
# 	,
# 		'Vera' =>
# 		{
# 		, 'typemap' =>
# 			{ 'c' => 'class'
# 			, 'd' => 'macro definition'
# 			, 'e' => 'enumerator name'
# 			, 'f' => 'function'
# 			, 'm' => 'class, struct or union member'
# 			, 'p' => 'program'
#			, 'P' => 'function prototype'
# 			, 't' => 'task'
# 			, 'T' => 'typedef'
# 			, 'v' => 'variable'
# 			, 'x' => 'external variable'
# 			}
# 		, 'langid' => 37
# 		}
# 	,
# 		'Verilog' =>
# 		{
# 		, 'typemap' =>
# 			{ 'c' => 'constant'
#			, 'e' => 'event'
# 			, 'f' => 'function'
#			, 'm' => 'module'
# 			, 'n' => 'net data type'
# 			, 'p' => 'port'
#			, 'r' => 'register'
# 			, 't' => 'task'
# 			}
# 		, 'langid' => 38
# 		}
# 	,
# 		'VHDL' =>
# 		{
# 		, 'typemap' =>
# 			{ 'c' => 'constant'
#			, 'C' => 'component'
# 			, 'd' => 'prototype'
# 			, 'e' => 'entity'
#			, 'f' => 'function'
# 			, 'l' => 'local definition'
# 			, 'p' => 'procedure'
#			, 'P' => 'package'
# 			, 'r' => 'record'
# 			, 't' => 'type'
#			, 'T' => 'subtype'
# 			}
# 		, 'langid' => 39
# 		}
# 	,
# 		'Vim' =>
# 		{
# 		, 'typemap' =>
# 			{ 'a' => 'autocommand group'
#			, 'c' => 'command'
# 			, 'f' => 'function'
# 			, 'm' => 'map'
#			, 'v' => 'variable'
# 			}
# 		, 'langid' => 40
# 		}
# 	,
# 		'YACC' =>
# 		{
# 		, 'typemap' =>
# 			{ 'l' => 'label'
# 			}
# 		, 'langid' => 41
# 		}
	,
	# User added languages (i.e. not in ctags)
	# 'langid' starts from 100 to leave room for new ctags languages

	# VB contributed by Dave Brondsema (2004)
		'VB' =>
		{ 'identdef' => '[\w]+'
		, 'reserved' =>
			[ 'AddHandler',  'AddressOf',      'Alias',          'And'
			, 'AndAlso',     'Ansi',           'As',             'Assembly'
			, 'Auto',        'Boolean',        'ByRef',          'Byte'
			, 'ByVal',       'Call',           'Case',           'Catch'
			, 'CBool',       'CByte',          'CChar',          'CDate'
			, 'CDec',        'CDbl',           'Char',           'CInt'
			, 'Class',       'CLng',           'CObj',           'Const'
			, 'CShort',      'CSng',           'CStr',           'CType'
			, 'Date',        'Decimal',        'Declare',        'Default'
			, 'Delegate',    'Dim',            'DirectCast',     'Do'
			, 'Double',      'Each',           'Else',           'ElseIf'
			, 'End',         'Enum',           'Erase',          'Error'
			, 'Event',       'Exit',           'False',          'Finally'
			, 'For',         'Friend',         'Function',       'Get'
			, 'GetType',     'GoSub',          'GoTo',           'Handles'
			, 'If',          'Implements',     'Imports',        'In'
			, 'Inherits',    'Integer',        'Interface',      'Is'
			, 'Let',         'Lib',            'Like',           'Long'
			, 'Loop',        'Me',             'Mod',            'Module'
			, 'MustInherit', 'MustOverride',   'MyBase',         'MyClass'
			, 'Namespace',   'New',            'Next',           'Not'
			, 'Nothing',     'NotInheritable', 'NotOverridable', 'Object'
			, 'On',          'Option',         'Optional',       'Or'
			, 'OrElse',      'Overloads',      'Overridable',    'Overrides'
			, 'ParamArray',  'Preserve',       'Private',        'Property'
			, 'Protected',   'Public',         'RaiseEvent',     'ReadOnly'
			, 'ReDim',       'REM',            'RemoveHandler',  'Resume'
			, 'Return',      'Select',         'Set',            'Shadows'
			, 'Shared',      'Short',          'Single',         'Static'
			, 'Step',        'Stop',           'String',         'Structure'
			, 'Sub',         'SyncLock',       'Then',           'Throw'
			, 'To',          'True',           'Try',            'TypeOf'
			, 'Unicode',     'Until',          'Variant',        'When'
			, 'While',       'With',           'WithEvents',     'WriteOnly'
			, 'Xor'
			]
		, 'spec' =>
			[ { 'comment'	=> [ 'rem ', '\$' ] }
			, { 'comment'	=> [ "'",    "\$" ] }
			, { 'string'	=> [  '"',   '"',  '\\\\.' ] }
			, { 'string'	=> [ "'",    "'",  "\\\\." ] }
			]
		, 'typemap' =>
			{ 'c' => 'const'
			, 'e' => 'enum'
			, 'f' => 'function'
			, 'l' => 'label'
			, 'n' => 'name'
			, 's' => 'subroutine'
			, 't' => 'type'
			, 'v' => 'variable'
			}
		, 'langid' => '100'
		}
	,
	# CSS contributed by Patrick Gerlier (2012)
		'CSS' =>	# CSS 2.1 only
		{ 'identdef' => '\\.?[\w-]+'
			# NOTE: unable to tell if dot is needed at start of identifier
			#		because ctags errors off on segmentation fault when
			#		CSS is parsed. (ajl 2012-08-19)
		, 'flags' => [ 'case_insensitive' ]
			# List collected from
			# http://www.w3.org/TR/2010/WD-CSS2-20101207/propidx.html
		, 'reserved' => [ qw(
			azimuth
			background-attachment background-color  background-image
			background-position   background-repeat background
			border-collapse       border-color      border-spacing
			border-style
			border-top       border-right       border-bottom       bottom-left
			border-top-color border-right-color border-bottom-color bottom-left-color 
			border-top-style border-right-style border-bottom-style bottom-left-style
			border-top-width border-right-width border-bottom-width bottom-left-width
			border-width
			border bottom
			caption-side clear clip color content
			counter-increment counter-reset
			cue-after cue-before cue
			cursor
			direction display
			elevation empty-cells
			float
			font-family font-size font-style font-variant font-weight font
			height
			left letter-spacing line-height
			list-style-image list-style-position list-style-type list-style
			margin-right margin-left margin-top margin-bottom margin
			max-height max-width min-height min-width
			orphans
			outline-color outline-style outline-width outline
			overflow
			padding-top padding-right padding-bottom padding-left padding
			page-break-after page-breal-before page-break-inside
			pause-after pause-before pause
			pitch-range pitch play-during
			position
			quotes
			richness right
			speak-header speak-numeral speak-punctuation speak
			speech-rate stress
			table-layout
			text-align text-decoration text-indent text-transform
			top
			unicode-bidi
			vertical-align visibility voice-family volume
			white-space    widows     width  word-spacing
			z-index
						) ]
		, 'spec' =>
			[ { 'comment'	=> [ '/\*',         '\*/'] }
			, { 'string'	=> [ '"',           '"',   '\\\\.' ] }
			, { 'string'	=> [ "'",           "'",   "\\\\." ] }
			]
		, 'typemap' =>
			{ 'c' => 'class'
			, 's' => 'selector'
			, 'i' => 'identity'
			}
		,	'langid' => 101
		}

	}
}
